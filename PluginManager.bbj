use java.io.File

use java.util.Base64
use java.util.HashMap
use java.util.Iterator
use java.util.ArrayList
use java.lang.StringBuilder

use com.google.gson.JsonArray
use com.google.gson.JsonObject

use java.io.IOException
use java.io.BufferedReader
use java.io.InputStreamReader

use ::PluginManager/gen/BBjPluginJsonGenerator.bbj::BBjPluginJsonGenerator

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/BBjPlugin.bbj::BBjPlugin
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin
use ::PluginManager/src/GithubApiService.bbj::GithubApiService
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin
use ::PluginManager/src/BBjPluginListParser.bbj::BBjPluginListParser
use ::PluginManager/src/InstallationService.bbj::InstallationService
use ::PluginManager/src/AuthenticationService.bbj::AuthenticationService
use ::PluginManager/src/CustomPluginListHandler.bbj::CustomPluginListHandler
use ::PluginManager/src/InstalledPluginFolderParser.bbj::InstalledPluginFolderParser

use ::PluginManagerLauncher.bbj::PluginManagerLauncher

class public PluginManager

    field private File pluginsHome!
    field private File pluginManagerDirectory!

    field private AuthenticationService authService!

    field private ArrayList remotePlugins!
    field private ArrayList installedPlugins!
    field private GithubApiService githubApiService!
    field private InstallationService installationService!
    field private BBjPluginJsonGenerator pluginJsonGenerator!
    field private PluginManagerLauncher pluginManagerLauncher!
    field private CustomPluginListHandler customPluginListHandler!
    field private InstalledPluginFolderParser pluginFolderParser!

    method public PluginManager()
        #pluginManagerLauncher! = new PluginManagerLauncher()
        #pluginsHome! = #pluginManagerLauncher!.getPluginsHome()

        #authService! = new AuthenticationService()

        #pluginManagerDirectory! = new File(#pluginsHome!, "PluginManager")

        #githubApiService! = new GithubApiService()
        #pluginJsonGenerator! = new BBjPluginJsonGenerator()

        #installationService! = new InstallationService()
        #pluginFolderParser! = new InstalledPluginFolderParser(#this!)
        #installedPlugins! = #pluginFolderParser!.getInstalledPlugins(#pluginsHome!)

        declare File bbjPluginListFile!
        bbjPluginListFile! = new File(#pluginManagerDirectory!, "bbj-plugin-list.json")
        #remotePlugins! = BBjPluginListParser.parse(bbjPluginListFile!)

        declare File customPluginListFile!
        customPluginListFile! = new File(#pluginManagerDirectory!, "custom-plugin-list.json")
        #customPluginListHandler! = new CustomPluginListHandler(customPluginListFile!)

        if(customPluginListFile!.exists()) then
            declare ArrayList customSourcePluginList!
            customSourcePluginList! = BBjPluginListParser.parse(customPluginListFile!)
            if(customSourcePluginList! <> null() AND !customSourcePluginList!.isEmpty()) then
                for i=0 to customSourcePluginList!.size()-1
                    cast(RemoteBBjPlugin, customSourcePluginList!.get(i)).setCustomSourcePlugin(Boolean.TRUE)
                next i
                #remotePlugins!.addAll(customSourcePluginList!)
            endif
        endif

        rem Adding the RemoteBBjPlugin objects as dependencies for the installed plugins
        #pluginFolderParser!.addDependencies(#installedPlugins!)

        rem mark plugins as installed or not installed depending on the remote plugin list
        #initialisePluginState()

        installedVersion = 0
        installedVersion = PluginManagerLauncher.getProgramVersion(err=*next)

        incorporatedVersion = 0
        incorporatedVersion = ::PluginManager/update/PluginManagerLauncher.bbj::PluginManagerLauncher.getProgramVersion(err=*next)

        if(incorporatedVersion > installedVersion) then
            declare StringBuilder sb!
            sb! = new StringBuilder()
            sb!.append("An update is available for the PluginManagerLauncher.bbj program.")
            sb!.append("Would you like to perform an update (the currently installed program will be renamed so that you can always perform a rollback) ?")
            a = msgbox(sb!.toString(), 4)

            if(a = 6) then
                #updateLauncher()
            endif
        endif
    methodend

    method private void updateLauncher()
        declare File currentProgramFile!
        currentProgramFile! = new File(BBjAPI().getFileSystem().resolvePath("PluginManagerLauncher.bbj"))

        declare File backupFile!
        backupFile! = new File(#pluginsHome!, "PluginManagerLauncher_back.bbj")
        backupFile!.createNewFile()
        
        arr! = java.lang.reflect.Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        java.lang.reflect.Array.set(arr!, 0, java.nio.file.StandardCopyOption.COPY_ATTRIBUTES)
        java.lang.reflect.Array.set(arr!, 0, java.nio.file.StandardCopyOption.REPLACE_EXISTING)

        java.nio.file.Files.move(currentProgramFile!.toPath(), backupFile!.toPath(), arr!)

        declare File newProgramFile!
        newProgramFile! = new File(#pluginManagerDirectory!, "update/PluginManagerLauncher.bbj")

        java.nio.file.Files.move(newProgramFile!.toPath(), currentProgramFile!.toPath(), arr!)
    methodend

    method public void addCustomBBjPluginRepository(String url!, Boolean useCredentials!)
        json! = null()

        if(useCredentials!) then
            username! = #authService!.getUsername()
            password! = #authService!.getPassword()

            if(username! = null() OR password! = null()) then
                throw "Unable to verify the Github credentials", 255
            endif
        endif

        json! = #githubApiService!.getProjectJson(url!, username!, password!)

        if(json! = null()) then
            throw "Failed to retrieve the project's information", 255
        endif

        declare JsonObject jsonObject!
        jsonObject! = #pluginJsonGenerator!.getProjectJsonObject(json!, username!, password!)

        jsonObject!.addProperty("password_required", useCredentials!)

        #customPluginListHandler!.addCustomPlugin(jsonObject!)

        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = BBjPluginListParser.getRemotePluginFromJson(jsonObject!, #remotePlugins!)
        remotePlugin!.setCustomSourcePlugin(Boolean.TRUE)
        remotePlugin!.setPasswordRequired(useCredentials!)

        #remotePlugins!.add(remotePlugin!)
    methodend

    method public void removeCustomPluginRepository(RemoteBBjPlugin remotePlugin!)
        #customPluginListHandler!.removeCustomPlugin(remotePlugin!.getID())
        #remotePlugins!.remove(remotePlugin!)
    methodend

    method public ArrayList getCustomRemoteBBjPluginList()
        declare Iterator it!
        it! = #remotePlugins!.iterator()

        declare ArrayList customPluginList!
        customPluginList! = new ArrayList()

        declare RemoteBBjPlugin remotePlugin!

        while(it!.hasNext())
            remotePlugin! = cast(RemoteBBjPlugin, it!.next())

            if(remotePlugin!.isCustomSourcePlugin()) then
                customPluginList!.add(remotePlugin!)
            endif
        wend

        methodret customPluginList!
    methodend

    method public Boolean areGithubCredentialsValid()
        username! = #authService!.getUsername()
        password! = #authService!.getPassword()

        if(username! = null() OR password! = null()) then
            throw "Unable to verify the Github credentials", 255
        endif

        methodret #githubApiService!.areGithubCredentialsValid(username!, password!)
    methodend

    method public void setGihubCredentials(String username!, String password!, Boolean saveCredentials!)
        #authService!.setUsername(username!, saveCredentials!)
        #authService!.setPassword(username!, saveCredentials!)
    methodend

    method public Boolean areGithubCredentialsSaved()
        methodret #authService!.isUsernameSaved() OR #authService!.isPasswordSaved()
    methodend

    method public Boolean isPluginProjectAccessible(String repoURL!, Boolean useCredentials!)
        if(useCredentials!) then
            username! = #authService!.getUsername()
            password! = #authService!.getPassword()

            if(username! = null() OR password! = null()) then
                throw "Unable to verify the Github credentials", 255
            endif

            methodret #githubApiService!.isRepositoryAccessible(repoURL!, username!, password!)
        endif

        methodret #githubApiService!.isRepositoryAccessible(repoURL!)
    methodend

    rem /**
    rem  * Parses the installed and remote plugin lists and sets the isInstalled flag for the remote plugins,
    rem  * the updateAvailable flag for the installed plugins.
    rem  */
    method private void initialisePluginState()
        if(#installedPlugins! = null() OR #installedPlugins!.isEmpty()) then
            methodret
        endif

        declare Tag tag!
        declare Iterator it!
        declare RemoteBBjPlugin remotePlugin!
        declare InstalledBBjPlugin installedPlugin!

        it! = #installedPlugins!.iterator()
        while(it!.hasNext())
            installedPlugin! = cast(InstalledBBjPlugin, it!.next())
            remotePlugin! = cast(RemoteBBjPlugin, #getRemotePlugin(installedPlugin!.getName()))

            if(remotePlugin! = null()) then
                continue
            endif

            rem mark the remote plugin as installed
            remotePlugin!.setInstalled(Boolean.TRUE)

            tag! = remotePlugin!.getTag(installedPlugin!.getTag().getName())
            if(tag! = null()) then
                continue
            endif

            #setUpdateAvailableFlag(installedPlugin!, tag!, remotePlugin!)
        wend
    methodend

    rem /**
    rem  * Checks if the given InstalledBBPlugin's version(=Tag) can be updated or not.
    rem  * 
    rem  * If the given Tag is the master tag, the timestamp of the last change and the timestamp of the installation will be compared.
    rem  * For all other tags, the tag name will be compared.
    rem  */
    method public void setUpdateAvailableFlag(InstalledBBjPlugin installedPlugin!, Tag tag!, RemoteBBjPlugin remotePlugin!)
        if(tag!.isMaster()) then
            if(tag!.getLastChangeDate().after(installedPlugin!.getInstallationDate())) then
                installedPlugin!.setUpdateAvailable(Boolean.TRUE)
            endif
        else
            version = num(tag!.getName())
            tagList! = remotePlugin!.getTagList(Boolean.FALSE, Boolean.FALSE)

            for i=0 to tagList!.size()-1
                if(!tagList!.get(i).getName().equals(tag!.getName()))then
                    if(num(tagList!.get(i).getName()) > version) then
                        installedPlugin!.setUpdateAvailable(Boolean.TRUE)
                        break
                    endif
                endif
            next i
        endif
    methodend

    method public BBjPlugin getInstalledPlugin(String pluginName!)
        methodret #getBBjPluginFromList(pluginName!, #installedPlugins!)
    methodend

    rem /**
    rem  * Returns a list with the available RemoteBBjPlugin objects
    rem  * 
    rem  * @return A list with the available plugin objects
    rem  */
    method public BBjPlugin getRemotePlugin(String pluginName!)
        methodret #getBBjPluginFromList(pluginName!, #remotePlugins!)
    methodend

    rem /**
    rem  * Parses the given list of plugin objects, and returns the plugin with the given name or null
    rem  * if none has the given name.
    rem  * 
    rem  * @return the plugin with the given name from the given list, or null if none has the given name.
    rem  */
    method private BBjPlugin getBBjPluginFromList(String pluginName!, ArrayList pluginList!)
        declare Iterator it!
        it! = pluginList!.iterator()

        declare BBjPlugin bbjPlugin!

        while(it!.hasNext())
            bbjPlugin! = cast(BBjPlugin, it!.next())

            if(bbjPlugin!.getName().equals(pluginName!)) then
                methodret bbjPlugin!
            endif
        wend

        methodret null()
    methodend

    rem /**
    rem  * Installes the BBjPlugin with the given name
    rem  * 
    rem  * @param pluginName! The name of the plugin to install
    rem  */
    method public void installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!)
        declare InstalledBBjPlugin installedPlugin!
        if(remotePlugin!.isPasswordRequired()) then
            username! = bbjapi().getStbl("gitUsername", err=*next)
            password! = bbjapi().getStbl("gitPassword", err=*next)

            if(username! = null() OR password! = null()) then
                declare BBjThinClient thinClient!
                thinClient! = bbjapi().getThinClient()
                username! = thinClient!.getUserProperty("gitUsername", err=*next)
                password! = thinClient!.getUserProperty("gitPassword", err=*next)

                if(username! = null() OR password! = null()) then
                    throw "Unable to verify the Github credentials", 255
                endif
            endif
            installedPlugin! = #installationService!.installPlugin(remotePlugin!, tag!, username!, password!)
        else
            installedPlugin! = #installationService!.installPlugin(remotePlugin!, tag!)
        endif

        #pluginFolderParser!.setHasConfigurationProgram(installedPlugin!)
        #pluginFolderParser!.setHasDemo(installedPlugin!)
        #installedPlugins!.add(installedPlugin!)

        #setUpdateAvailableFlag(installedPlugin!, installedPlugin!.getTag(), remotePlugin!)
    methodend

    rem /**
    rem  * Uninstalls the BBj plugin with the given name.
    rem  * 
    rem  * @param pluginName! The name of the plugin to uninstall
    rem  */
    method public void uninstallPlugin(InstalledBBjPlugin installedPlugin!)
        if(installedPlugin! = null()) then
            throw "Unknown plugin: " + pluginName!, 255
        endif

        #installationService!.uninstallPlugin(installedPlugin!)

        rem set the install flag of the remote plugin to false
        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = cast(RemoteBBjPlugin, #getRemotePlugin(installedPlugin!.getName()))

        rem Check if the plugin's remote pendant exists, which might not always be the case with custom plugins
        if(remotePlugin! <> null()) then
            remotePlugin!.setInstalled(Boolean.FALSE)
        endif

        #installedPlugins!.remove(installedPlugin!)
    methodend

    method private Boolean isRemotePluginInstalled(RemoteBBjPlugin remotePlugin!, Tag tag!)
        remotePluginId = remotePlugin!.getID()

        declare Iterator it!
        it! = #installedPlugins!.iterator()

        declare InstalledBBjPlugin installedPlugin!

        while(it!.hasNext())
            installedPlugin! = cast(InstalledBBjPlugin, it!.next())

            if(installedPlugin!.getID() = remotePluginId) then
                if(installedPlugin!.getTag().getName().equals(tag!.getName())) then
                    methodret Boolean.TRUE
                endif
            endif
        wend

        methodret Boolean.FALSE
    methodend

    method public ArrayList getInstalledPluginList()
        methodret #installedPlugins!
    methodend

    method public ArrayList getRemotePluginList(Boolean includeDevelopmentPlugins!)
        if(includeDevelopmentPlugins!) then
            methodret #remotePlugins!
        endif

        declare RemoteBBjPlugin remotePlugin!

        declare ArrayList availablePluginList!
        availablePluginList! = new ArrayList()

        declare Iterator it!
        it! = #remotePlugins!.iterator()

        while(it!.hasNext())
            remotePlugin! = cast(RemoteBBjPlugin, it!.next())

            if(!remotePlugin!.isDevelopmentPlugin()) then
                availablePluginList!.add(remotePlugin!)
            endif
        wend

        methodret availablePluginList!
    methodend

    method public void updatePlugin(InstalledBBjPlugin plugin!)
        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = cast(RemoteBBjPlugin, #getRemotePlugin(plugin!.getName()))

        if(remotePlugin! = null()) then
            throw "Missing BBj Plugin project", 260
            methodret
        endif

        declare Tag tag!
        tag! = cast(Tag, remotePlugin!.getTag(plugin!.getTag().getName()))

        if(tag! = null()) then
            throw "Unknown Version Tag", 260
            methodret
        endif

        if(!tag!.isMaster()) then
            latestVersionTagName! = tag!.getName()

            declare Tag currentTag!

            declare ArrayList tagList!
            tagList! = remotePlugin!.getTagList(Boolean.FALSE, Boolean.TRUE)

            declare Iterator it!
            it! = tagList!.iterator()

            while(it!.hasNext())
                currentTag! = cast(Tag, it!.next())

                if(num(currentTag!.getName()) > num(tag!.getName())) then
                    latestVersionTagName! = currentTag!.getName()
                    break
                endif
            wend

            tag! = cast(Tag, remotePlugin!.getTag(latestVersionTagName!))
        endif

        rem TODO Make sure not to delete any files that the user created 
        #installationService!.uninstallPlugin(plugin!)
        #installedPlugins!.remove(plugin!)

        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = #installationService!.installPlugin(remotePlugin!, tag!)
        #pluginFolderParser!.setHasDemo(installedPlugin!)

        plugin!.setInstallationDate(new java.util.Date())
        plugin!.setLastChangedDate(tag!.getLastChangeDate())

        #installedPlugins!.add(installedPlugin!)
    methodend

    rem /**
    rem  * Executes the Demo.bbj file in the given plugin's Demo folder.
    rem  */
    method public void runDemo(InstalledBBjPlugin installedPlugin!, String demoProgramName!)
        command! = argv(0) + " -q " + installedPlugin!.getInstallationDirectory().toString() + File.separator + "Demo" + File.separator + demoProgramName!
        print "launching: " + command!
        a = scall(command! + " &")
    methodend
    
    rem /**
    rem  * Runs the given plugin's configuration program with the given name.
    rem  * 
    rem  * @param installedPlugin! The installed plugin whose configuration program will be run
    rem  * @param configProgramName! The name of the configuration program to run     
    rem  */
    method public void runConfigurationProgram(InstalledBBjPlugin installedPlugin!, String configProgramName!)
        if(!installedPlugin!.hasConfigurationProgram()) then
            methodret
        endif
        
        command! = argv(0) + " -q " + installedPlugin!.getInstallationDirectory().toString() + File.separator + "cfg" + File.separator + configProgramName!
        print "launching: " + command!
        a = scall(command! + " &")
    methodend

    method public Boolean hasDependencies(Tag tag!)
        if(#hasBBjDependency(tag!) OR #hasDependenciesToBBjPlugins(tag!)) then
            methodret Boolean.TRUE
        endif

        methodret Boolean.FALSE
    methodend

    rem /**
    rem  * Returns true if the given Tag object has a dependency to a specific BBj Revision, false otherwise.
    rem  * 
    rem  * @return true if the plugin has a dependency to a BBj revision, false otherwise. 
    rem  */
    method public Boolean hasBBjDependency(Tag tag!)
        if(tag! = null()) then
            throw "null object: tag!", 255
        endif

        if(tag!.getBBjDependency() <> null() AND !tag!.getBBjDependency().isEmpty()) then
            methodret Boolean.TRUE
        endif

        methodret Boolean.FALSE
    methodend

    rem /**
    rem  * Returns true if the plugin with the given name and the given tag name 
    rem  * has dependencies to other plugins, false otherwise.
    rem  * 
    rem  * @param pluginName! The name of the plugin.
    rem  * @param tagName! The name of the plugin's tag.
    rem  * 
    rem  * @return true if the plugin has dependencies to BBj Plugins, false otherwise.
    rem  */
    method public Boolean hasDependenciesToBBjPlugins(Tag tag!)
        if(tag! = null()) then
            throw "null object: tag!" , 255
        endif

        methodret !tag!.getPluginDependencyMap().isEmpty()
    methodend

    method public Tag getRemotePluginTag(String pluginName!, String tagName!)
        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = cast(RemoteBBjPlugin, #getRemotePlugin(pluginName!))

        if(remotePlugin! = null()) then
            throw "Unknown plugin: " + pluginName!, 255
        endif

        if(!remotePlugin!.hasTag(tagName!)) then
            throw "Unknown Tag: " + tagName!, 255
        endif

        methodret remotePlugin!.getTag(tagName!)
    methodend

    method public Boolean areDependenciesInstalled(Tag tag!)
        if(tag! = null()) then
            throw "null object: tag!", 255
        endif

        declare HashMap dependencyMap!
        dependencyMap! = tag!.getPluginDependencyMap()

        declare Tag dependencyTag!
        declare RemoteBBjPlugin remotePlugin!

        declare Iterator it!
        it! = dependencyMap!.entrySet().iterator()
        while(it!.hasNext())
            entry! = it!.next()

            remotePlugin! = cast(RemoteBBjPlugin, entry!.getKey())
            dependencyTag! = cast(Tag, entry!.getValue())

            if(!#isRemotePluginInstalled(remotePlugin!, dependencyTag!)) then
                methodret Boolean.FALSE
            endif
        wend

        methodret Boolean.TRUE
    methodend

    rem /**
    rem  * Returns true if the installed BBj Version is newer than the specified min version
    rem  */
    method public Boolean isBBjVersionValid(Tag tag!)
        if(tag! = null()) then
            throw "null object: tag!" , 255
        endif

        if(!#hasBBjDependency(tag!)) then
            methodret Boolean.TRUE
        endif

        if("REV " + str(tag!.getBBjDependency()) <= REV) then
            methodret Boolean.TRUE
        endif

        methodret Boolean.FALSE
    methodend

    method public Boolean isDependency(InstalledBBjPlugin bbjPlugin!)
        methodret !#getDependentPlugins(bbjPlugin!).isEmpty()
    methodend

    method public ArrayList getDependentPlugins(InstalledBBjPlugin bbjPlugin!)
        if(bbjPlugin! = null()) then
            throw "null object: bbjPlugin!",255
        endif

        declare ArrayList dependentPlugins!
        declare RemoteBBjPlugin remotePlugin!
        declare InstalledBBjPlugin installedPlugin!

        dependentPlugins! = new ArrayList()

        remotePlugin! = cast(RemoteBBjPlugin, #getRemotePlugin(bbjPlugin!.getName()))

        declare Iterator it!
        it! = #installedPlugins!.iterator()

        while(it!.hasNext())
            installedPlugin! = cast(InstalledBBjPlugin,it!.next())

            if(installedPlugin!.getID() = bbjPlugin!.getID()) then
                continue
            endif

            if(installedPlugin!.getTag().getPluginDependencyMap().containsKey(remotePlugin!)) then
                dependentPlugins!.add(installedPlugin!)
            endif
        wend

        methodret dependentPlugins!
    methodend

classend