use java.util.List
use java.util.Arrays
use java.util.HashMap
use java.util.Iterator
use java.util.ArrayList

use java.text.SimpleDateFormat

use java.io.File
use java.io.FileReader
use java.io.FileWriter

use com.google.gson.JsonArray
use com.google.gson.JsonParser
use com.google.gson.JsonObject

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/PluginManager.bbj::PluginManager
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin

class public InstalledPluginFolderParser

    field private static PluginManager pluginManager!
    field private static HashMap dependencyMap!

    method public InstalledPluginFolderParser(PluginManager pluginManager!)
        #pluginManager! = pluginManager!
    methodend

    method public ArrayList getInstalledPlugins(File directory!)
        declare ArrayList pluginList!
        pluginList! = new ArrayList()

        declare BBjVector fileList!
        fileList! = new BBjVector(Arrays.asList(directory!.listFiles()))

        declare Iterator it!
        it! = fileList!.iterator()

        declare File currentFile!
        declare InstalledBBjPlugin installedPlugin!

        #dependencyMap! = new HashMap()

        while(it!.hasNext())
            currentFile! = cast(File, it!.next())

            if(currentFile!.isDirectory() AND !currentFile!.getName().equals("PluginManager")) then
                if(#isBBjPlugin(currentFile!)) then
                    installedPlugin! = #getInstalledPluginFromDirectory(currentFile!)
                    if(installedPlugin! <> null()) then
                        pluginList!.add(installedPlugin!)
                    endif
                endif
            endif
        wend

        methodret pluginList!
    methodend

    method public void setHasDemo(InstalledBBjPlugin installedPlugin!)
        rem Checking if the plugin has a Demo
        declare File demoFolder!
        demoFolder! = new File(installedPlugin!.getInstallationDirectory(), "Demo")

        if(demoFolder!.exists()) then
            declare File currentFile!
            declare ArrayList demoFileNameList!
            demoFileNameList! = new ArrayList()

            declare java.util.List fileList!
            fileList! = cast(java.util.List, Arrays.asList(demoFolder!.listFiles()))

            declare Iterator it!
            it! = fileList!.iterator()

            while(it!.hasNext())
                currentFile! = cast(File, it!.next())

                if(currentFile!.isFile() AND currentFile!.getName().endsWith(".bbj")) then
                    demoFileNameList!.add(currentFile!.getName())
                endif
            wend

            if(!demoFileNameList!.isEmpty()) then
                installedPlugin!.setHasDemo(Boolean.TRUE)
                installedPlugin!.setDemoProgramNames(demoFileNameList!)
            endif
        endif
    methodend

    method private Boolean isBBjPlugin(File directory!)
        rem TODO Currently this method only checks if the file are there, this might need some improvements
        rem like checking if the properteis are well set in the files f.e.
        declare File pluginJsonFile!
        pluginJsonFile! = new File(directory!, "bbj-plugin.json")

        if(!pluginJsonFile!.exists()) then
            methodret Boolean.FALSE
        endif

        declare File installFile!
        installFile! = new File( directory!, "install.json")

        if(!installFile!.exists()) then
            methodret Boolean.FALSE
        endif

        methodret Boolean.TRUE
    methodend

    rem /**
    rem  * Parses the given directory and returns a InstalledBBjPlugin object based on the files defined in that directory,
    rem  * or null if the directory doesn't contain the main file describing a BBj Plugin directory.
    rem  * 
    rem  * @param directory! The directory to parse.
    rem  * @return The InstalledBBjPlugin installed in the given directory. 
    rem  */
    method private InstalledBBjPlugin getInstalledPluginFromDirectory(File directory!)
        declare File pluginJsonFile!
        pluginJsonFile! = new File(directory!, "bbj-plugin.json")

        rem Each BBj plugin must have a bbj-plugin.json file. If not, ignore it
        if(!pluginJsonFile!.exists()) then
            methodret null()
        endif

        declare File installFile!
        installFile! = new File(directory!, "install.json")

        rem As for the bbj-plugin.json file, the plugin also needs to have a install.json file
        if(!installFile!.exists()) then
            methodret null()
        endif

        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = new InstalledBBjPlugin()

        installedPlugin!.setInstallationDirectory(directory!)

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare FileReader jsonFileReader!
        jsonFileReader!  = new FileReader(pluginJsonFile!)

        declare JsonObject jsonObject!
        jsonObject! = jsonParser!.parse(jsonFileReader!).getAsJsonObject()

        installedPlugin!.setName(jsonObject!.get("name").getAsString())
        installedPlugin!.setDescription(jsonObject!.get("description").getAsString())
        installedPlugin!.setVersion(jsonObject!.get("version").getAsString())
        installedPlugin!.setAuthor(jsonObject!.get("author").getAsString())

        jsonFileReader!.close()

        declare SimpleDateFormat sdf!
        sdf! = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        jsonFileReader!  = new FileReader(installFile!)
        jsonObject! = jsonParser!.parse(jsonFileReader!).getAsJsonObject()

        if(jsonObject!.has("id")) then
            installedPlugin!.setID(jsonObject!.get("id").getAsInt())
        endif

        if(jsonObject!.has("project_url")) then
            installedPlugin!.setProjectURL(jsonObject!.get("project_url").getAsString())
        endif

        if(jsonObject!.has("installation_date")) then
            installedPlugin!.setInstallationDate(sdf!.parse(jsonObject!.get("installation_date").getAsString()))
        endif

        if(jsonObject!.has("tag")) then
            declare Tag tag!
            tag! = new Tag()

            declare JsonObject jsonTagObject!
            jsonTagObject! = jsonObject!.get("tag").getAsJsonObject()

            if(jsonTagObject!.has("bbj_dependency")) then
                tag!.setBBjDependency(jsonTagObject!.get("bbj_dependency").getAsString())
            endif

            if(jsonTagObject!.has("tag_name")) then
                tag!.setName(jsonTagObject!.get("tag_name").getAsString())
            endif

            if(jsonTagObject!.has("documentation_url")) then
                tag!.setDocumentationURL(jsonTagObject!.get("documentation_url").getAsString())
            endif

            if(jsonTagObject!.has("last_change")) then
                tag!.setLastChangeDate(sdf!.parse(jsonTagObject!.get("last_change").getAsString()))
            endif

            if(jsonTagObject!.has("plugin_dependencies")) then
                declare JsonArray dependencyArray!
                dependencyArray! = jsonTagObject!.get("plugin_dependencies").getAsJsonArray()

                #dependencyMap!.put(installedPlugin!, dependencyArray!)
            endif

            installedPlugin!.setTag(tag!)
        endif

        jsonFileReader!.close()

        #setHasConfigurationProgram(installedPlugin!)
        #setHasDemo(installedPlugin!)

        methodret installedPlugin!
    methodend

    rem /**
    rem  * Parses the given installed plugin's home directory for a plugin configuration 
    rem  * program located in a cfg/ folder. If the plugin has such a program its "hasConfigurationProgram"
    rem  * will be set to true.
    rem  * 
    rem  * @param installedPlugin! The plugin whose home directory will be searched.
    rem  */
    method public void setHasConfigurationProgram(InstalledBBjPlugin installedPlugin!)
        if(installedPlugin! = null()) then
            methodret
        endif

        rem Checking if the plugin has a cfg folder
        declare File cfgFolder!
        cfgFolder! = new File(installedPlugin!.getInstallationDirectory(), "cfg")

        if(!cfgFolder!.exists()) then
            methodret
        endif

        declare File configurationFile!
        configurationFile! = new File(cfgFolder!, "configure.bbj")

        if(configurationFile!.exists()) then
            installedPlugin!.setHasConfigurationProgram(Boolean.TRUE)
        endif
    methodend

    rem /**
    rem  * Parses the installed plugins and sets the RemoteBBjPlugin dependencies
    rem  */
    method public void addDependencies(ArrayList installedPluginList!)
        if(#dependencyMap! = null() OR #dependencyMap!.isEmpty()) then
            methodret
        endif

        if(installedPluginList! = null() OR installedPluginList!.isEmpty()) then
            methodret
        endif

        declare Tag tag!
        declare Iterator it!
        declare HashMap dMap!
        declare JsonArray jsonArray!
        declare JsonObject jsonObject!
        declare Iterator jsonArrayIterator!
        declare RemoteBBjPlugin remotePlugin!
        declare InstalledBBjPlugin installedPlugin!

        it! = installedPluginList!.iterator()

        while(it!.hasNext())
            installedPlugin! = cast(InstalledBBjPlugin, it!.next())

            if(#dependencyMap!.containsKey(installedPlugin!)) then
                jsonArray! = cast(JsonArray, #dependencyMap!.get(installedPlugin!))

                if(jsonArray! = null() OR jsonArray!.size() = 0) then
                    continue
                endif

                dMap! = new HashMap()
                jsonArrayIterator! = jsonArray!.iterator()
                while(jsonArrayIterator!.hasNext())
                    jsonObject! = cast(JsonObject, jsonArrayIterator!.next())

                    remotePlugin! = cast(RemoteBBjPlugin, #pluginManager!.getRemotePlugin(jsonObject!.get("plugin_name").getAsString()))

                    tag! = remotePlugin!.getTag(jsonObject!.get("plugin_version").getAsString())

                    dMap!.put(remotePlugin!, tag!)
                wend

                if(!dMap!.isEmpty()) then
                    installedPlugin!.getTag().setPluginDependencyMap(dMap!)
                endif
            endif
        wend
    methodend

    rem /**
    rem  * Parses the given installed plugin's installation directory and returns true if the directory contains
    rem  * a directory called dependencies/ having one or more .jar files. Returns false otherwise.
    rem  * 
    rem  * @param installedPlugin!  
    rem  */
    method public boolean hasPluginJarDependencies(InstalledBBjPlugin installedPlugin!)
        rem Checking if the plugin has a dependencies/ folder
        declare File dependenciesFolder!
        dependenciesFolder! = new File(installedPlugin!.getInstallationDirectory(), "dependencies")

        if(dependenciesFolder!.exists()) then
            declare File currentFile!

            declare java.util.List fileList!
            fileList! = cast(java.util.List, Arrays.asList(dependenciesFolder!.listFiles()))

            declare Iterator it!
            it! = fileList!.iterator()

            while(it!.hasNext())
                currentFile! = cast(File, it!.next())

                if(currentFile!.isFile() AND currentFile!.getName().endsWith(".jar")) then
                    methodret Boolean.TRUE
                endif
            wend
        endif
        
        methodret Boolean.FALSE
    methodend
    
    method public BBjVector getJarDependencies(InstalledBBjPlugin installedPlugin!)
        rem Checking if the plugin has a dependencies/ folder
        declare File dependenciesFolder!
        dependenciesFolder! = new File(installedPlugin!.getInstallationDirectory(), "dependencies")

        if(!dependenciesFolder!.exists()) then
            methodret new BBjVector()
        endif
        
        declare File currentFile!
        
        declare BBjVector jarFilesNames!
        jarFilesNames! = new BBjVector()

        declare java.util.List fileList!
        fileList! = cast(java.util.List, Arrays.asList(dependenciesFolder!.listFiles()))

        declare Iterator it!
        it! = fileList!.iterator()

        while(it!.hasNext())
            currentFile! = cast(File, it!.next())

            if(currentFile!.isFile() AND currentFile!.getName().endsWith(".jar")) then
                jarFilesNames!.add(currentFile!.getAbsolutePath())
            endif
        wend
        
        methodret jarFilesNames!
    methodend
    
classend