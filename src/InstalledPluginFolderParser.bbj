use java.util.Arrays
use java.util.HashMap
use java.util.Iterator
use java.util.ArrayList

use java.text.SimpleDateFormat

use java.io.File
use java.io.FileReader
use java.io.FileWriter

use com.google.gson.JsonArray
use com.google.gson.JsonParser
use com.google.gson.JsonObject

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin

class public InstalledPluginFolderParser

    field private static HashMap dependencyMap!

    method public static ArrayList getInstalledPlugins(File directory!)
        declare ArrayList pluginList!
        pluginList! = new ArrayList()
        
        declare BBjVector fileList!
        fileList! = new BBjVector(Arrays.asList(directory!.listFiles()))

        declare Iterator it!
        it! = fileList!.iterator()

        declare File currentFile!
        declare InstalledBBjPlugin installedPlugin!
        
        #dependencyMap! = new HashMap()

        while(it!.hasNext())
            currentFile! = cast(File, it!.next())

            if(currentFile!.isDirectory() AND !currentFile!.getName().equals("PluginManager")) then
                if(#isBBjPlugin(currentFile!)) then
                    installedPlugin! = #getInstalledPluginFromDirectory(currentFile!)
                    if(installedPlugin! <> null()) then
                        pluginList!.add(installedPlugin!)
                    endif
                endif
            endif
        wend
        
        methodret pluginList!
    methodend
    
    method public static HashMap getDependencyMap()
        methodret #dependencyMap!
    methodend
    
    method private static void addPluginDependencies(ArrayList pluginList!)
        if(#dependencyMap!.isEmpty()) then
            methodret
        endif
        
        declare JsonArray jsonArray!
        declare JsonObject jsonObject!
        declare Iterator jsonArrayIterator!
        declare Iterator dependencyIterator!
        
        dependencyIterator! = #dependencyMap!.entrySet().iterator()
        while(dependencyIterator!.hasNext())
            entry! = dependencyIterator!.next()
            
            installedPlugin! = cast(InstalledBBjPlugin, entry!.getKey())
            jsonArray! = cast(JsonArray, entry!.getValue())
            
            jsonArrayIterator! = jsonArray!.iterator()
            while(jsonArrayIterator!.hasNext())
                jsonObject! = cast(JsonObject, jsonArrayIterator!.next())
                
                if(jsonObject!.has("plugin_name")) then
                    
                endif
                
                if(jsonObject!.has("plugin_version")) then
                
                endif
            wend
        wend
    methodend
    
    method public static void setHasDemo(InstalledBBjPlugin installedPlugin!)
        rem Checking if the plugin has a Demo
        declare File demoFolder!
        demoFolder! = new File(installedPlugin!.getInstallationDirectory(), "Demo")

        if(demoFolder!.exists()) then
            declare File demoPgm!
            demoPgm! = new File(demoFolder!, "Demo.bbj")

            if(demoPgm!.exists()) then
                installedPlugin!.setHasDemo(Boolean.TRUE)
            endif
        endif
    methodend
    
    method private static Boolean isBBjPlugin(File directory!)
        rem TODO Currently this method only checks if the file are there, this might need some improvements
        rem like checking if the properteis are well set in the files f.e.
        declare File pluginJsonFile!
        pluginJsonFile! = new File(directory!, "bbj-plugin.json")

        if(!pluginJsonFile!.exists()) then
            methodret Boolean.FALSE
        endif

        declare File installFile!
        installFile! = new File( directory!, "install.json")

        if(!installFile!.exists()) then
            methodret Boolean.FALSE
        endif

        methodret Boolean.TRUE
    methodend

    rem /**
    rem  * Parses the given directory and returns a InstalledBBjPlugin object based on the files defined in that directory,
    rem  * or null if the directory doesn't contain the main file describing a BBj Plugin directory.
    rem  * 
    rem  * @param directory! The directory to parse.
    rem  * @return The InstalledBBjPlugin installed in the given directory. 
    rem  */
    method private static InstalledBBjPlugin getInstalledPluginFromDirectory(File directory!)
        declare File pluginJsonFile!
        pluginJsonFile! = new File(directory!, "bbj-plugin.json")

        rem Each BBj plugin must have a bbj-plugin.json file. If not, ignore it
        if(!pluginJsonFile!.exists()) then
            methodret null()
        endif

        declare File installFile!
        installFile! = new File(directory!, "install.json")

        rem As for the bbj-plugin.json file, the plugin also needs to have a install.json file
        if(!installFile!.exists()) then
            methodret null()
        endif

        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = new InstalledBBjPlugin()

        installedPlugin!.setInstallationDirectory(directory!)

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare FileReader jsonFileReader!
        jsonFileReader!  = new FileReader(pluginJsonFile!)

        declare JsonObject jsonObject!
        jsonObject! = jsonParser!.parse(jsonFileReader!).getAsJsonObject()

        installedPlugin!.setName(jsonObject!.get("name").getAsString())
        installedPlugin!.setDescription(jsonObject!.get("description").getAsString())
        installedPlugin!.setVersion(jsonObject!.get("version").getAsString())
        installedPlugin!.setAuthor(jsonObject!.get("author").getAsString())

        jsonFileReader!.close()

        declare SimpleDateFormat sdf!
        sdf! = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        jsonFileReader!  = new FileReader(installFile!)
        jsonObject! = jsonParser!.parse(jsonFileReader!).getAsJsonObject()

        if(jsonObject!.has("id")) then
            installedPlugin!.setID(jsonObject!.get("id").getAsInt())
        endif

        if(jsonObject!.has("installation_date")) then
            installedPlugin!.setInstallationDate(sdf!.parse(jsonObject!.get("installation_date").getAsString()))
        endif

        if(jsonObject!.has("tag")) then
            declare Tag tag!
            tag! = new Tag()

            declare JsonObject jsonTagObject!
            jsonTagObject! = jsonObject!.get("tag").getAsJsonObject()
            
            if(jsonTagObject!.has("bbj_dependency")) then
                tag!.setBBjDependency(jsonTagObject!.get("bbj_dependency").getAsString())
            endif

            if(jsonTagObject!.has("tag_name")) then
                tag!.setName(jsonTagObject!.get("tag_name").getAsString())
            endif

            if(jsonTagObject!.has("last_change")) then
                tag!.setLastChangeDate(sdf!.parse(jsonTagObject!.get("last_change").getAsString()))
            endif
            
            if(jsonTagObject!.has("plugin_dependencies")) then
                declare JsonArray dependencyArray!
                dependencyArray! = jsonTagObject!.get("plugin_dependencies").getAsJsonArray()
                
                #dependencyMap!.put(installedPlugin!, dependencyArray!)
            endif

            installedPlugin!.setTag(tag!)
        endif

        jsonFileReader!.close()

        #setHasDemo(installedPlugin!)

        methodret installedPlugin!
    methodend

classend