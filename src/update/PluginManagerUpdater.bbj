use java.io.File
use java.io.FileReader
use java.io.BufferedReader
use java.io.InputStreamReader

use java.net.URL
use java.net.HttpURLConnection

use java.nio.file.Files
use java.nio.file.StandardCopyOption

use java.lang.reflect.Array

use com.google.gson.JsonObject
use com.google.gson.JsonParser

use ::PluginManager/update/PluginManagerLauncher.bbj::DownloadHelper
use ::PluginManager/update/PluginManagerLauncher.bbj::PluginManagerLauncher

rem /**
rem  * The PluginManagerUpdater is the main class responsible for updating:
rem  * - The PluginManager
rem  * - The PluginManagerLauncher.bbj file
rem  * - The bbj-plugin-list.json file
rem  */
class public PluginManagerUpdater

    field private static URL PM_LIST_FILE_URL! = new URL("https://raw.githubusercontent.com/BBj-Plugins/PluginManager/master/bbj-plugin-list.json")
    field private static URL PM_PROJECT_URL!   = new URL("https://github.com/BBj-Plugins/PluginManager/archive/master.zip")

    field private File pluginsDirectory!
    field private File pluginManagerDirectory!

    method public PluginManagerUpdater()
        #pluginsDirectory! = PluginManagerLauncher.getPluginsHomeDirectory()
        #pluginManagerDirectory! = new File(#pluginsDirectory!, "PluginManager")
    methodend

    rem /**
    rem  * Returns true if the installed PluginManagerLauncher.bbj 
    rem  * program version is outdated and can to be updated, 
    rem  * false otherwise.
    rem  * 
    rem  * @return true if a newer launcher version is available, false otherwise.
    rem  */
    method public Boolean isLauncherUpdateAvailable()
        installedVersion = 0
        installedVersion = ::PluginManagerLauncher.bbj::PluginManagerLauncher.getProgramVersion(err=*next)

        incorporatedVersion = 0
        incorporatedVersion = PluginManagerLauncher.getProgramVersion(err=*next)

        if(installedVersion >= incorporatedVersion) then
            rem The latest version or a newer version is installed
            methodret Boolean.FALSE
        endif

        methodret Boolean.TRUE
    methodend

    rem /**
    rem  * Updates the PluginManagerLauncher.bbj program in the 
    rem  * bbj/plugins/ directory by replacing it with the file 
    rem  * from PluginManager/update/ directory. This method 
    rem  * renamed the previous launcher file with the _back 
    rem  * prefix, in order to perform a rollback if the new launcher
    rem  * version is causing some issues.
    rem  */
    method public void updateLauncher()
        if !#isLauncherUpdateAvailable() then
            rem Do nothing if the newest version or newer is installed
            methodret
        endif 

        declare File currentProgramFile!
        currentProgramFile! = new File(BBjAPI().getFileSystem().resolvePath("PluginManagerLauncher.bbj"))

        declare File backupFile!
        backupFile! = new File(#pluginsDirectory!, "PluginManagerLauncher_back.bbj")
        backupFile!.createNewFile()

        arr! = Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        Array.set(arr!, 0, StandardCopyOption.COPY_ATTRIBUTES)
        Array.set(arr!, 0, StandardCopyOption.REPLACE_EXISTING)

        Files.move(currentProgramFile!.toPath(), backupFile!.toPath(), arr!)

        declare File newProgramFile!
        newProgramFile! = new File(#pluginManagerDirectory!, "update/PluginManagerLauncher.bbj")

        Files.copy(newProgramFile!.toPath(), currentProgramFile!.toPath(), arr!)
    methodend

    rem /**
    rem  * Updates the PluginManager/bbj-plugin-list.json file which contains the
    rem  * list of available plugins.
    rem  */
    method public void updatePluginList()
        declare File downloadedFile! 
        downloadFile! = File.createTempFile("bbj-plugin-list", ".json")
        
        declare DownloadHelper downloadHelper!
        downloadHelper! = new DownloadHelper()
        
        downloadHelper!.setDownloadURL(#PM_LIST_FILE_URL!)
        downloadHelper!.setOutputFile(downloadFile!)
        downloadHelper!.downloadFile(Boolean.FALSE)

        if !downloadHelper!.wasDownloadSuccessful() then
            throw "Failed to update the bbj-plugin-list.json file", 300
        endif

        declare File pluginListFile!
        pluginListFile! = new File(#pluginManagerDirectory!, "bbj-plugin-list.json")

        arr! = Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        Array.set(arr!, 0, StandardCopyOption.COPY_ATTRIBUTES)
        Array.set(arr!, 0, StandardCopyOption.REPLACE_EXISTING)

        Files.move(downloadFile!.toPath(), pluginListFile!.toPath(), arr!)
    methodend

    rem /**
    rem  * Returns true if a newer version of the PluginManager is available,
    rem  * false otherwise.
    rem  * 
    rem  * When the PluginManager is installed, the last commit's checksum is also
    rem  * saved in the install.json file. This method compares the PluginManager 
    rem  * Github repository's last commit checksum to the commmit checksum saved 
    rem  * during the installation in order to detemine whether an update is 
    rem  * available for the PluginManager.
    rem  * 
    rem  * @return true if an update is available, false otherwise
    rem  */
    method public Boolean isPluginManagerUpdateAvailable()
        declare URL repositoryURL!
        repositoryURL! = new URL("https://api.github.com/repos/BBj-Plugins/PluginManager/branches/master")

        connection! = cast(HttpURLConnection,repositoryURL!.openConnection())
        connection!.setRequestMethod("GET")
        connection!.setRequestProperty("Accept", "appliation/json")
        connection!.setRequestProperty("Accept","v3")

        response = connection!.getResponseCode()

        builder! = new StringBuilder()
        br! = new BufferedReader(new InputStreamReader(connection!.getInputStream()), err=*next)

        if br! = null() then
            methodret Boolean.FALSE
        endif

        line! = br!.readLine()
        while(line! <> null())
            builder!.append(line!)
            line! = br!.readLine()
        wend

        rem closing the http connection
        connection!.disconnect()

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare JsonObject jsonObject!
        jsonObject! = jsonParser!.parse(builder!.toString()).getAsJsonObject()
        if !jsonObject!.has("commit") then
            rem something went wrong 
            methodret Boolean.FALSE
        endif   

        commit! = jsonObject!.get("commit").getAsJsonObject()
        if !commit!.has("sha") then
            rem something went wrong
            methodret Boolean.FALSE
        endif

        latestCommitHash! = commit!.get("sha").getAsString()
        installedCommitHash! = #getInstalledPluginManagerCommitHash()

        rem the hash differs to the latest version --> An update is available
        if latestCommitHash! <> installedCommitHash! then
            methodret Boolean.TRUE    
        endif

        methodret Boolean.FALSE
    methodend

    rem /**
    rem  * Updates the PluginManager by downloading the latest version the 
    rem  * plugin's Github repository. The method also saved the last commit's
    rem  * checksum in the install.json file in order to be able to determine 
    rem  * if a PluginManager update is available or not.
    rem  */
    method public void updatePluginManager()
        declare File downloadedFile! 
        downloadFile! = File.createTempFile("PluginManager", ".zip")
        
        declare DownloadHelper downloadHelper!
        downloadHelper! = new DownloadHelper()

        downloadHelper!.setDownloadURL(#PM_PROJECT_URL!)
        downloadHelper!.setOutputFile(downloadFile!)
        downloadHelper!.downloadFile(Boolean.FALSE)

        if !downloadHelper!.wasDownloadSuccessful() then
            throw "Failed to update the bbj-plugin-list.json file", 300
        endif

        rem unzip the archive file 
        tempPluginDirectory! = new File(#pluginsDirectory!, str(System.currentTimeMillis()))

        rem unpack the PluginManager.zip into the temp file
        PluginManagerLauncher.unzipArchive(downloadFile!, tempPluginDirectory!)

        rem at this point, we have the new PluginManager version in a temp directory 
        rem move it into the bbj/plugins directory and rename it

        arr! = Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        Array.set(arr!, 0, StandardCopyOption.COPY_ATTRIBUTES)
        Array.set(arr!, 0, StandardCopyOption.REPLACE_EXISTING)

        rem Files.move(tempPluginDirectory!.toPath(), #pluginManagerDirectory!.toPath(), arr!)

        rem download the zip
        rem extract the zip 
        rem get the commit checksum 
        rem add it to the install.json
    methodend

    rem /**
    rem  * Returns the installed PluginManager's commit hash.
    rem  * This commit hash will be used to identify whether the 
    rem  * installed PluginManager is up to date or not.
    rem  * 
    rem  * @return the installed PluginManager's commit hash.
    rem  */
    method private String getInstalledPluginManagerCommitHash()
        if #pluginManagerDirectory! = null() then
            methodret null()
        endif

        declare File installJsonFile!
        installJsonFile! = new File(#pluginManagerDirectory!, "install.json")

        if !installJsonFile!.exists() then 
            methodret null()
        endif

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare JsonObject jsonObject!
        jsonObject! = jsonParser!.parse(new FileReader(installJsonFile!)).getAsJsonObject()
        if jsonObject!.has("sha") then
            methodret jsonObject!.get("sha").getAsString()
        endif       

        methodret null()
    methodend

classend

declare PluginManagerUpdater updater!
updater! = new PluginManagerUpdater()
rem updater!.updatePluginList()
rem ? updater!.getInstalledPluginManagerCommitHash()

updater!.isPluginManagerUpdateAvailable()

rem unit tests
rem 1. Download the plugin list 
rem 2. Check if the file has changed on disk ? 
rem 3. Update plugin manager
rem 4. The hash should change on disk 
