use java.util.Map
use java.util.HashMap
use java.util.Iterator
use java.util.ArrayList

use java.io.File
use java.io.FileReader
use java.io.FileWriter

use com.google.gson.JsonArray
use com.google.gson.JsonObject
use com.google.gson.JsonParser

use java.text.SimpleDateFormat

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin

class public BBjPluginListParser

    field public static String PRE_INSTALL_HOOKS!  = "pre-install-hooks"
    field public static String POST_INSTALL_HOOKS! = "post-install-hooks"

    field public static String PRE_UNINSTALL_HOOKS!  = "pre-uninstall-hooks"
    field public static String POST_UNINSTALL_HOOKS! = "post-uninstall-hooks"

    method public static ArrayList parse(File pluginListFile!)
        if(!pluginListFile!.exists()) then
            throw "Missing file bbj-plugin-list.json. Re-run the PluginManagerLauncher to update your installation.", 255
        endif

        declare ArrayList remotePlugins!
        remotePlugins! = new ArrayList()

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare JsonArray jsonArray!
        jsonArray! = jsonParser!.parse(new FileReader(pluginListFile!)).getAsJsonArray()

        declare Iterator it!
        it! = jsonArray!.iterator()

        declare JsonObject jsonObject!
        declare RemoteBBjPlugin remotePlugin!

        rem The HashMap used to store the Plugins and the JsonArray describing the plugin's dependencies
        rem The map is parsed at last in order to set the correct dependencies for each plugin
        declare HashMap dependencyMap!
        dependencyMap! = new HashMap()

        while(it!.hasNext())
            jsonObject! = cast(JsonObject, it!.next())
            remotePlugin! = #getRemotePlugin(jsonObject!, dependencyMap!)
            remotePlugins!.add(remotePlugin!)
        wend

        #addDependencies(dependencyMap!, remotePlugins!)

        methodret remotePlugins!
    methodend

    method private static RemoteBBjPlugin getRemotePlugin(JsonObject jsonObject!, HashMap dependencyMap!)
        declare Tag tag!
        declare ArrayList tagList!
        declare SimpleDateFormat sdf!
        declare JsonArray tagJsonArray!
        declare JsonObject tagJsonObject!
        declare RemoteBBjPlugin remotePlugin!
        declare Iterator tagJsonArrayIterator!

        rem 2017-08-10T13:10:07Z
        sdf! = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        remotePlugin! = new RemoteBBjPlugin()

        remotePlugin!.setID(jsonObject!.get("id").getAsInt())
        remotePlugin!.setName(jsonObject!.get("name").getAsString())
        remotePlugin!.setDescription(jsonObject!.get("description").getAsString())

        remotePlugin!.setProjectURL(jsonObject!.get("project_url").getAsString())
        remotePlugin!.setApiURL(jsonObject!.get("api_url").getAsString())
        remotePlugin!.setDownloadURL(jsonObject!.get("download_url").getAsString())
        remotePlugin!.setAuthor(jsonObject!.get("author").getAsString(), err=*next)

        if(jsonObject!.has("password_required")) then
            remotePlugin!.setPasswordRequired(jsonObject!.get("password_required").getAsBoolean())
        endif

        if(jsonObject!.has("tags")) then
            tagJsonArray! = jsonObject!.get("tags").getAsJsonArray()
            tagJsonArrayIterator! = tagJsonArray!.iterator()

            tagList! = new ArrayList()
            while(tagJsonArrayIterator!.hasNext())
                tagJsonObject! = cast(JsonObject, tagJsonArrayIterator!.next())

                if(tagJsonObject!.has("tag_name")) then
                    tag! = new Tag()
                    tag!.setName(tagJsonObject!.get("tag_name").getAsString())

                    if(tagJsonObject!.has("last_change")) then
                        lastChange! = tagJsonObject!.get("last_change").getAsString()

                        lastChange! = lastChange!.replaceAll("T", " ")
                        lastChange! = lastChange!.replaceAll("Z", "")

                        tag!.setLastChangeDate(sdf!.parse(lastChange!))
                    endif

                    if(tagJsonObject!.has("documentation_url")) then
                        tag!.setDocumentationURL(tagJsonObject!.get("documentation_url").getAsString())
                    endif

                    if(tagJsonObject!.has("bbj_dependency")) then
                        tag!.setBBjDependency(tagJsonObject!.get("bbj_dependency").getAsString())
                    endif

                    if(tagJsonObject!.has(#PRE_INSTALL_HOOKS!)) then
                        programHooksJsonArray! = tagJsonObject!.get(#PRE_INSTALL_HOOKS!).getAsJsonArray()
                        arrayIterator! = programHooksJsonArray!.iterator()
                        while arrayIterator!.hasNext()
                            tag!.addPreInstallHookProgram(arrayIterator!.next().getAsString())
                        wend
                    endif                    

                    if(tagJsonObject!.has(#POST_INSTALL_HOOKS!)) then
                        programHooksJsonArray! = tagJsonObject!.get(#POST_INSTALL_HOOKS!).getAsJsonArray()
                        arrayIterator! = programHooksJsonArray!.iterator()
                        while arrayIterator!.hasNext()
                            tag!.addPostInstallHookProgram(arrayIterator!.next().getAsString())
                        wend
                    endif

                    if(tagJsonObject!.has(#PRE_UNINSTALL_HOOKS!)) then
                        programHooksJsonArray! = tagJsonObject!.get(#PRE_UNINSTALL_HOOKS!).getAsJsonArray()
                        arrayIterator! = programHooksJsonArray!.iterator()
                        while arrayIterator!.hasNext()
                            tag!.addPreUninstallHookProgram(arrayIterator!.next().getAsString())
                        wend
                    endif

                    if(tagJsonObject!.has(#POST_UNINSTALL_HOOKS!)) then
                        programHooksJsonArray! = tagJsonObject!.get(#POST_UNINSTALL_HOOKS!).getAsJsonArray()
                        arrayIterator! = programHooksJsonArray!.iterator()
                        while arrayIterator!.hasNext()
                            tag!.addPostUninstallHookProgram(arrayIterator!.next().getAsString())
                        wend
                    endif

                    if(tagJsonObject!.has("plugin_dependencies") AND tagJsonObject!.get("plugin_dependencies").isJsonArray()) then
                        dependencyMap!.put(tag!, tagJsonObject!.get("plugin_dependencies").getAsJsonArray())
                    endif

                    tagList!.add(tag!)
                endif
            wend

            remotePlugin!.setTagList(tagList!)
        endif

        methodret remotePlugin!
    methodend


    rem /**
    rem  * 
    rem  * @param jsonObject! The json object to parse 
    rem  * @param remoteBBjPluginList! The list of RemoteBBjPlugin objects to set the dependencies
    rem  */
    method public static RemoteBBjPlugin getRemotePluginFromJson(JsonObject jsonObject!, ArrayList remoteBBjPluginList!)
        declare HashMap dependencyMap!
        dependencyMap! = new HashMap()

        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = #getRemotePlugin(jsonObject!, dependencyMap!)

        #addDependencies(dependencyMap!, remoteBBjPluginList!)

        methodret remotePlugin!
    methodend

    rem /**
    rem  *  
    rem  * 
    rem  * @param dependencyMap! The HashMap&lt;RemoteBBjPlugin,JsonArray&gt;
    rem  */
    method private static void addDependencies(HashMap dependencyMap!, ArrayList remotePluginList!)
        declare Iterator dependencyMapIterator!
        dependencyMapIterator! = dependencyMap!.entrySet().iterator()

        declare Tag tag!
        declare RemoteBBjPlugin plugin!
        declare HashMap dependencyHashMap!
        declare JsonArray dependenciesJsonArray!
        declare JsonObject dependencyJsonObject!
        declare Iterator dependencyJsonArrayIterator!

        while(dependencyMapIterator!.hasNext())
            entry! = dependencyMapIterator!.next()

            tag! = cast(Tag, entry!.getKey())
            dependenciesJsonArray! = cast(JsonArray, entry!.getValue())
            dependencyHashMap! = new HashMap()

            dependencyJsonArrayIterator! = dependenciesJsonArray!.iterator()
            while(dependencyJsonArrayIterator!.hasNext())
                dependencyJsonObject! = cast(JsonObject, dependencyJsonArrayIterator!.next())

                if(!dependencyJsonObject!.has("plugin_name")) then
                    throw "Missing dependency property: plugin_name", 255
                endif

                if(!dependencyJsonObject!.has("plugin_version")) then
                    throw "Missing dependency property: plugin_version", 255
                endif

                if(!dependencyJsonObject!.has("project_url")) then
                    throw "Missing dependency property: project_url", 255
                endif

                pluginName! = dependencyJsonObject!.get("plugin_name").getAsString()
                tagName! = dependencyJsonObject!.get("plugin_version").getAsString()
                pluginProjectURL! = dependencyJsonObject!.get("project_url").getAsString()

                plugin! = cast(RemoteBBjPlugin, #getPlugin(pluginName!, remotePluginList!))

                if(plugin! = null()) then
                    throw "Unable to resolve dependency: " + plugin_name!, 255
                endif

                if(!plugin!.getProjectURL().equals(pluginProjectURL!)) then
                    throw "Unable to resolbe dependency for project URL: " + pluginProjectURL!, 255
                endif

                if(!plugin!.hasTag(tagName!)) then
                    throw "Unknown dependency version tag: " + tagName!, 255
                endif

                rem the plugin and the tag need to be saved 
                dependencyHashMap!.put(plugin!, plugin!.getTag(tagName!))
            wend

            tag!.setPluginDependencyMap(dependencyHashMap!)
        wend
    methodend

    method private static RemoteBBjPlugin getPlugin(String name!, ArrayList pluginList!)
        declare Iterator it!
        it! = pluginList!.iterator()

        declare RemoteBBjPlugin bbjPlugin!

        while(it!.hasNext())
            bbjPlugin! = cast(RemoteBBjPlugin, it!.next())

            if(bbjPlugin!.getName().equals(name!)) then
                methodret bbjPlugin!
            endif
        wend

        methodret null()
    methodend

classend