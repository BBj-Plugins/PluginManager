use java.net.URL

use java.util.Base64

use java.io.IOException
use java.io.InputStream
use java.io.BufferedReader
use java.io.InputStreamReader

use java.lang.StringBuilder

use java.net.HttpURLConnection

use org.apache.http.auth.UsernamePasswordCredentials

use ::PluginManager/update/PluginManagerLauncher.bbj::ProxyService
use ::PluginManager/update/PluginManagerLauncher.bbj::DownloadHelper

class public GithubApiService

    field private String GITHUB_URL! = "https://github.com/"
    field private String GITHUB_API_URL! = "https://api.github.com/repos/"
    
    field private String RATE_LIMIT_URL! = "https://api.github.com/rate_limit"
    field private String DOWNLOAD_URL_PREFIX! = "https://raw.githubusercontent.com/"

    method public GithubApiService()
    methodend

    method public String getDownloadURLPrefix()
        methodret #DOWNLOAD_URL_PREFIX!
    methodend

    rem /**
    rem  * Returns true if the given username and password are valid. 
    rem  * The method calls the https://api.github.com/rate_limit
    rem  */
    method public Boolean areGithubCredentialsValid(String username!, String password!)
        #isRepositoryAccessible(#RATE_LIMIT_URL!,username!,password!)
    methodend

    method private String getGithubApiURL(String repoURL!)
        if(!repoURL!.startsWith(#GITHUB_URL!)) then
            throw "Invalid Github Repository URL", 255
        endif

        repoURL! = repoURL!.replace(#GITHUB_URL!, #GITHUB_API_URL!)

        methodret repoURL!
    methodend

    method public Boolean isRepositoryAccessible(String repoURL!)
        methodret #isRepositoryAccessible(repoURL!, null(), null())
    methodend

    method public Boolean isRepositoryAccessible(String repoURL!, String username!, String password!)
        declare DownloadHelper downloadHelper!
        downloadHelper! = new DownloadHelper()
        
        downloadHelper!.setDownloadURL(repoURL!)
        downloadHelper!.setSiteCredentials(new UsernamePasswordCredentials(username!, password!))
        
        declare HttpHost proxy!
        proxy! = ProxyService.getProxyFromUserProperties()
        if proxy! <> null() then
            downloadHelper!.setProxy(proxy!)
            
            declare UsernamePasswordCredentials proxyCredentials!
            proxyCredentials! = ProxyService.getProxyCredentialsFromUserProperties()
            downloadHelper!.setProxyCredentials(proxyCredentials!)
            methodret downloadHelper!.isSiteReachable(Boolean.TRUE)
        endif
        
        methodret downloadHelper!.isSiteReachable(Boolean.FALSE)
    methodend

    method public String getJson(String repoURL!)
        methodret #getJson(repoURL!, null(), null())
    methodend

    method public String getJson(String repoURL!, String username!, String password!)
        declare DownloadHelper downloadHelper!
        downloadHelper! = new DownloadHelper()
        
        downloadHelper!.setDownloadURL(repoURL!)
        downloadHelper!.setSiteCredentials(new UsernamePasswordCredentials(username!, password!))
        
        declare HttpHost proxy!
        proxy! = ProxyService.getProxyFromUserProperties()
        if proxy! <> null() then
            downloadHelper!.setProxy(proxy!)
            
            declare UsernamePasswordCredentials proxyCredentials!
            proxyCredentials! = ProxyService.getProxyCredentialsFromUserProperties()
            downloadHelper!.setProxyCredentials(proxyCredentials!)
            downloadHelper!.downloadFile(Boolean.TRUE)
        else
            downloadHelper!.downloadFile(Boolean.FALSE)
        endif
        
        if !downloadHelper!.wasDownloadSuccessful() then
            throw "An error occured while retriving the repository's JSON String: " + downloadHelper!.getDownloadError(), 255
        endif
        
        json! = #getJsonFromStream(downloadHelper!.getResponseInputStream())

        methodret json!
    methodend

    method private String getJsonFromStream(InputStream stream!)
        declare StringBuilder builder!
        builder! = new StringBuilder()

        br! = new BufferedReader(new InputStreamReader(stream!))

        line! = br!.readLine()
        while(line! <> null())
            builder!.append(line!)
            line! = br!.readLine()
        wend

        methodret builder!.toString()
    methodend

classend