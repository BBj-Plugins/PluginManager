use java.io.File
use java.io.FileWriter
use java.io.FileReader

use java.nio.file.Files

use java.util.Arrays
use java.util.Iterator
use java.util.ArrayList

use java.lang.reflect.Array
use java.nio.file.StandardCopyOption

use java.text.SimpleDateFormat

use java.util.List
use java.lang.StringBuilder

use java.util.zip.ZipInputStream
use java.util.zip.ZipEntry

use java.net.URL
use java.net.URLConnection
use java.net.HttpURLConnection

use java.io.InputStream
use java.io.OutputStream
use java.io.BufferedReader
use java.io.FileInputStream
use java.io.FileOutputStream
use java.io.InputStreamReader
use java.io.BufferedInputStream
use java.io.BufferedOutputStream
use java.io.ByteArrayInputStream
use java.io.ByteArrayOutputStream

use com.google.gson.JsonArray
use com.google.gson.JsonParser
use com.google.gson.JsonObject
use com.google.gson.JsonElement
use com.google.gson.JsonFactory
use com.google.gson.JsonPrimitive
use com.google.gson.stream.JsonReader

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin

use ::PluginManager/update/PluginManagerLauncher.bbj::PluginManagerLauncher

use org.apache.http.HttpHost
use org.apache.http.auth.UsernamePasswordCredentials

use ::PluginManager/src/GithubApiService.bbj::GithubApiService
use ::PluginManager/src/BBjPluginListParser.bbj::BBjPluginListParser

class public InstallationService

    field private PluginManagerLauncher pluginManagerLauncher!
    field private File localPluginDirectory!

    method public InstallationService()
        #pluginManagerLauncher! = new PluginManagerLauncher()
        #localPluginDirectory! = #pluginManagerLauncher!.getPluginsHome()
    methodend

    method public InstalledBBjPlugin installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!)
        methodret #installPlugin(remotePlugin!, tag!, null(), null())
    methodend

    method public InstalledBBjPlugin installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!, String username!, String password!)
        declare File pluginDirectory!
        declare UsernamePasswordCredentials credentials!
        
        pluginDirectory! = new File(#localPluginDirectory!, remotePlugin!.getName())
        url! = new URL(remotePlugin!.getProjectURL() + "/archive/" + tag!.getName() + ".zip")

        if(username! <> null() AND password! <> null()) then
            credentials! = new UsernamePasswordCredentials(username!, password!)
        endif

        tempPluginDirectory! = new File(#localPluginDirectory!, str(System.currentTimeMillis()))

        installSuccess! = #pluginManagerLauncher!.installPlugin(url!, tempPluginDirectory!.getName(), credentials!)
        if !installSuccess! then
            methodret null()
        endif

        rem executing the pre-install scripts before actually renaming the plugin directory
        #executeHookPrograms(tag!.getPreInstallHookProgramList(), tempPluginDirectory!)

        rem The BBjWidget directory is always present on fresh installations
        rem causing the copy mechanism to fail.
        rem This work-around removes the BBjWidget directory and installs the plugin anyway. 
        if pluginDirectory!.getName() = "BBjWidget" then
            #deleteDirectory(pluginDirectory!)    
        endif

        copyOptions! = Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        Array.set(copyOptions!, 0, StandardCopyOption.COPY_ATTRIBUTES)
        Array.set(copyOptions!, 0, StandardCopyOption.REPLACE_EXISTING)

        rem renaming the plugin = starting to install it
        Files.move(tempPluginDirectory!.toPath(), pluginDirectory!.toPath(), copyOptions!)

        remotePlugin!.setInstalled(Boolean.TRUE)

        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = new InstalledBBjPlugin()

        installedPlugin!.setInstallationDirectory(pluginDirectory!)
        installedPlugin!.setID(remotePlugin!.getID())
        installedPlugin!.setName(remotePlugin!.getName())
        installedPlugin!.setDescription(remotePlugin!.getDescription())
        installedPlugin!.setAuthor(remotePlugin!.getAuthor())
        installedPlugin!.setVersion(remotePlugin!.getVersion())
        installedPlugin!.setUpdateAvailable(Boolean.FALSE)
        installedPlugin!.setLastChangedDate(tag!.getLastChangeDate())
        installedPlugin!.setProjectURL(remotePlugin!.getProjectURL())

        installedPlugin!.setTag(tag!.clone())

        installationDate! = new java.util.Date()
        installedPlugin!.setInstallationDate(installationDate!)

        declare JsonObject jsonObject!
        jsonObject! = new JsonObject()
        jsonObject!.addProperty("id", installedPlugin!.getID().intValue())
        jsonObject!.addProperty("name", installedPlugin!.getName())
        jsonObject!.addProperty("project_url", installedPlugin!.getProjectURL())

        declare SimpleDateFormat sdf!
        sdf! = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        jsonObject!.addProperty("installation_date", sdf!.format(installedPlugin!.getInstallationDate()))

        declare Tag tag!
        tag! = installedPlugin!.getTag()

        declare JsonObject jsonTagObject!
        jsonTagObject! = new JsonObject()

        if(tag!.getBBjDependency() <> null()) then
            jsonTagObject!.addProperty("bbj_dependency", tag!.getBBjDependency())
        endif

        jsonTagObject!.addProperty("tag_name", tag!.getName())
        jsonTagObject!.addProperty("documentation_url", tag!.getDocumentationURL(), err=*next)
        jsonTagObject!.addProperty("last_change", sdf!.format(tag!.getLastChangeDate()))

        if !tag!.getPreInstallHookProgramList().isEmpty() then
            jsonArray! = new JsonArray()
            for i=0 to tag!.getPreInstallHookProgramList().size() -1
                jsonArray!.add(new JsonPrimitive(tag!.getPreInstallHookProgramList().get(i)))
            next i
            jsonTagObject!.add(BBjPluginListParser.getPRE_INSTALL_HOOKS(), jsonArray!)
        endif

        if !tag!.getPostInstallHookProgramList().isEmpty() then
            jsonArray! = new JsonArray()
            for i=0 to tag!.getPostInstallHookProgramList().size() -1
                jsonArray!.add(new JsonPrimitive(tag!.getPostInstallHookProgramList().get(i)))
            next i
            jsonTagObject!.add(BBjPluginListParser.getPOST_INSTALL_HOOKS(), jsonArray!)
        endif

        if !tag!.getPreUninstallHookProgramList().isEmpty() then
            jsonArray! = new JsonArray()
            for i=0 to tag!.getPreUninstallHookProgramList().size() -1
                jsonArray!.add(new JsonPrimitive(tag!.getPreUninstallHookProgramList().get(i)))
            next i
            jsonTagObject!.add(BBjPluginListParser.getPRE_UNINSTALL_HOOKS(), jsonArray!)
        endif

        if !tag!.getPostUninstallHookProgramList().isEmpty() then
            jsonArray! = new JsonArray()
            for i=0 to tag!.getPostUninstallHookProgramList().size() -1
                jsonArray!.add(new JsonPrimitive(tag!.getPostUninstallHookProgramList().get(i)))
            next i
            jsonTagObject!.add(BBjPluginListParser.getPOST_UNINSTALL_HOOKS(), jsonArray!)
        endif

        if(!tag!.getPluginDependencyMap().isEmpty()) then
            declare JsonArray dependencyArray!
            dependencyArray! = new JsonArray()

            declare JsonObject dependency!

            declare Iterator it!
            it! = cast(Iterator, tag!.getPluginDependencyMap().entrySet().iterator())

            while(it!.hasNext())
                entry! = it!.next()

                dependency! = new JsonObject()

                dependency!.addProperty("plugin_name" , cast(RemoteBBjPlugin, entry!.getKey()).getName())
                dependency!.addProperty("project_url", cast(RemoteBBjPlugin, entry!.getKey()).getProjectURL())
                dependency!.addProperty("plugin_version", cast(Tag, entry!.getValue()).getName())

                dependencyArray!.add(dependency!)
            wend

            jsonTagObject!.add("plugin_dependencies", dependencyArray!)
        endif

        jsonObject!.add("tag", jsonTagObject!)

        file! = new File(installedPlugin!.getInstallationDirectory(), "install.json")

        declare FileWriter fileWriter!
        fileWriter! = new FileWriter(file!)
        fileWriter!.write(jsonObject!.toString())
        fileWriter!.close()

        file!.createNewFile()

        rem the plugin has been installed, run the post install scripts
        #executeHookPrograms(tag!.getPostInstallHookProgramList(), pluginDirectory!)

        methodret installedPlugin!
    methodend

    rem /**
    rem  * Iterates through the list of installed plugins and sets the names 
    rem  * according to the remote plugin's name. 
    rem  * 
    rem  * This method was created because in some cases the bbj plugin repository 
    rem  * name differed from the plugin name defined in the bbj-plugin.json
    rem  * causing some strange side effects. 
    rem  */
    method public void mapPluginNames(ArrayList installedPlugins!, ArrayList remotePlugins!)
        if installedPlugins!.isEmpty() then
            methodret
        endif

        declare auto InstalledBBjPlugin installedPlugin!
        declare auto RemoteBBjPlugin remotePlugin!

        declare JsonParser jsonParser!
        jsonParser! = new JsonParser()

        declare FileWriter fileWriter!

        declare File installJsonFile!
        declare File installationDirectory!

        for i=0 to installedPlugins!.size() -1
            installedPlugin! = installedPlugins!.get(i)

            if(installedPlugin!.getName().isEmpty()) then
                continue
            endif

            for j=0 to remotePlugins!.size() -1
                remotePlugin! = remotePlugins!.get(j)
                if remotePlugin!.getID() <> installedPlugin!.getID() then
                    continue
                endif
                
                installedPlugin!.setName(remotePlugin!.getName())

                rem Saving the plugin name in the install.json file so that this routine is not
                rem required to run a second time for this plugin
                installationDirectory! = installedPlugin!.getInstallationDirectory()
                installJsonFile! = new File(installationDirectory!, "install.json")

                if(installJsonFile!.exists() AND installJsonFile!.isFile() AND installJsonFile!.canWrite()) then
                    jsonFileReader!  = new FileReader(installJsonFile!)
                    jsonObject! = jsonParser!.parse(jsonFileReader!).getAsJsonObject()
                    jsonObject!.addProperty("name", remotePlugin!.getName())
                    
                    fileWriter! = new FileWriter(installJsonFile!)
                    fileWriter!.write(jsonObject!.toString())
                    fileWriter!.close()
                endif
            next j            
        next i
    methodend

    method public void uninstallPlugin(InstalledBBjPlugin installedPlugin!)
        tag! = installedPlugin!.getTag()
        pluginDirectory! = installedPlugin!.getInstallationDirectory()

        rem Executing the pre-uninstall hook programs
        #executeHookPrograms(tag!.getPreUninstallHookProgramList(), pluginDirectory!)

        tempPluginDirectory! = new File(pluginDirectory!.getParent(), str(System.currentTimeMillis()))

        copyOptions! = Array.newInstance(Class.forName("java.nio.file.StandardCopyOption"), 1)
        Array.set(copyOptions!, 0, StandardCopyOption.COPY_ATTRIBUTES)
        Array.set(copyOptions!, 0, StandardCopyOption.REPLACE_EXISTING)

        rem Rename the plugin directory to prepare it for the uninstall process
        Files.move(pluginDirectory!.toPath(), tempPluginDirectory!.toPath(), copyOptions!)

        rem execute the post uninstall hooks 
        #executeHookPrograms(tag!.getPostUninstallHookProgramList(), tempPluginDirectory!)

        rem deleting the plugin directory = uninstalling it 
        #deleteDirectory(tempPluginDirectory!)        
    methodend

    method private void executeHookPrograms(ArrayList hookProgramList!, File workingDirectory!)
        if hookProgramList!.isEmpty() then
            methodret
        endif

        pluginDirectory! = workingDirectory!.toString() + File.separator
        command! = argv(0) + " -q " + "-WD" + pluginDirectory! + " "

        for i=0 to hookProgramList!.size() -1
            a = scall(command! + hookProgramList!.get(i))
        next i
    methodend

    rem /**
    rem  * Deletes the given directory and all its files and sub directories recursively.
    rem  * 
    rem  * @param directory! The directory to delete
    rem  */
    method private void deleteDirectory(File directory!)
        if(directory!.exists()) then
            filesToDelete! = Arrays.asList(directory!.listFiles())

            it! = filesToDelete!.iterator()
            while(it!.hasNext())
                file! = it!.next()

                if(file!.isDirectory()) then
                    #deleteDirectory(file!)
                endif

                rem print "deleting: " + file!.toString()
                file!.delete()
            wend
        endif

        directory!.delete()
    methodend

classend