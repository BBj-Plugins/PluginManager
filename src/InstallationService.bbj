use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin

use ::PluginManagerLauncher.bbj::PluginManagerLauncher

use java.io.File
use java.io.FileWriter

use java.util.Arrays
use java.util.Iterator
use java.util.ArrayList

use com.google.gson.JsonArray
use com.google.gson.JsonObject

use java.text.SimpleDateFormat

use java.util.List
use java.lang.StringBuilder

use java.util.zip.ZipInputStream
use java.util.zip.ZipEntry

use java.net.URL
use java.net.URLConnection
use java.net.HttpURLConnection

use java.lang.Boolean

use java.io.InputStream
use java.io.OutputStream
use java.io.BufferedReader
use java.io.FileInputStream
use java.io.FileOutputStream
use java.io.InputStreamReader
use java.io.BufferedInputStream
use java.io.BufferedOutputStream
use java.io.ByteArrayInputStream
use java.io.ByteArrayOutputStream

use com.google.gson.JsonParser
use com.google.gson.JsonElement
use com.google.gson.JsonFactory
use com.google.gson.stream.JsonReader

use ::PluginManager/src/GithubApiService.bbj::GithubApiService

class public InstallationService

    field private PluginManagerLauncher pluginManagerLauncher!
    field private File localPluginDirectory!

    method public InstallationService()
        #pluginManagerLauncher! = new PluginManagerLauncher()
        #localPluginDirectory! = #pluginManagerLauncher!.getPluginsHome()
    methodend
    
    method public InstalledBBjPlugin installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!)
        methodret #installPlugin(remotePlugin!, tag!, null(), null())
    methodend
    
    method public InstalledBBjPlugin installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!, String username!, String password!)
        downloadURL! = remotePlugin!.getProjectURL() + "/archive/" + tag!.getName() + ".zip"
        projectName! = remotePlugin!.getName()
        
        declare File pluginDirectory!
        pluginDirectory! = new File(#localPluginDirectory!, projectName!)

        url$ = remotePlugin!.getProjectURL() + "/archive/" + tag!.getName() + ".zip"

        if(username! <> null() AND password! <> null()) then
            declare GithubApiService service!
            service! = new GithubApiService()
            authToken! = service!.getAuthToken(username!, password!)
            
            declare URLConnection connection!
            connection! = service!.getConnection(new URL(url$) , authToken!)
            #pluginManagerLauncher!.installPlugin(connection!, remotePlugin!.getName())
        else
            #pluginManagerLauncher!.installPlugin(url$, remotePlugin!.getName())
        endif
        
        remotePlugin!.setInstalled(Boolean.TRUE)

        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = new InstalledBBjPlugin()

        installedPlugin!.setInstallationDirectory(pluginDirectory!)
        installedPlugin!.setID(remotePlugin!.getID())
        installedPlugin!.setName(remotePlugin!.getName())
        installedPlugin!.setDescription(remotePlugin!.getDescription())
        installedPlugin!.setAuthor(remotePlugin!.getAuthor())
        installedPlugin!.setVersion(remotePlugin!.getVersion())
        installedPlugin!.setUpdateAvailable(Boolean.FALSE)
        installedPlugin!.setLastChangedDate(tag!.getLastChangeDate())

        installedPlugin!.setTag(tag!.clone())

        installationDate! = new java.util.Date()
        installedPlugin!.setInstallationDate(installationDate!)

        declare JsonObject jsonObject!
        jsonObject! = new JsonObject()
        jsonObject!.addProperty("id", installedPlugin!.getID().intValue())

        declare SimpleDateFormat sdf!
        sdf! = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        jsonObject!.addProperty("installation_date", sdf!.format(installedPlugin!.getInstallationDate()))

        declare Tag tag!
        tag! = installedPlugin!.getTag()

        declare JsonObject jsonTagObject!
        jsonTagObject! = new JsonObject()

        if(tag!.getBBjDependency() <> null()) then
            jsonTagObject!.addProperty("bbj_dependency", tag!.getBBjDependency())
        endif

        jsonTagObject!.addProperty("tag_name", tag!.getName())
        jsonTagObject!.addProperty("last_change", sdf!.format(tag!.getLastChangeDate()))

        if(!tag!.getPluginDependencyMap().isEmpty()) then
            declare JsonArray dependencyArray!
            dependencyArray! = new JsonArray()

            declare JsonObject dependency!

            declare Iterator it!
            it! = cast(Iterator, tag!.getPluginDependencyMap().entrySet().iterator())

            while(it!.hasNext())
                entry! = it!.next()

                dependency! = new JsonObject()

                dependency!.addProperty("plugin_name" , cast(RemoteBBjPlugin, entry!.getKey()).getName())
                dependency!.addProperty("project_url", cast(RemoteBBjPlugin, entry!.getKey()).getProjectURL())
                dependency!.addProperty("plugin_version", cast(Tag, entry!.getValue()).getName())

                dependencyArray!.add(dependency!)
            wend

            jsonTagObject!.add("plugin_dependencies", dependencyArray!)
        endif

        jsonObject!.add("tag", jsonTagObject!)

        file! = new File(installedPlugin!.getInstallationDirectory(), "install.json")

        declare FileWriter fileWriter!
        fileWriter! = new FileWriter(file!)
        fileWriter!.write(jsonObject!.toString())
        fileWriter!.close()

        file!.createNewFile()

        methodret installedPlugin!
    methodend

    method public void uninstallBBjPlugin(InstalledBBjPlugin installedPlugin!)
        #deleteDirectory(installedPlugin!.getInstallationDirectory())
    methodend

    rem /**
    rem  * Deletes the given directory and all its files and sub directories recursively.
    rem  * 
    rem  * @param directory! The directory to delete
    rem  */
    method private void deleteDirectory(File directory!)
        if(directory!.exists()) then
            filesToDelete! = Arrays.asList(directory!.listFiles())

            it! = filesToDelete!.iterator()
            while(it!.hasNext())
                file! = it!.next()

                if(file!.isDirectory()) then
                    #deleteDirectory(file!)
                endif

                print "deleting: " + file!.toString()
                file!.delete()
            wend
        endif

        directory!.delete()
    methodend

classend