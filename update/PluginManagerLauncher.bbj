use java.util.List
use java.util.Arrays
use java.util.Iterator
use java.util.ArrayList
use java.lang.StringBuilder

use java.util.zip.ZipInputStream
use java.util.zip.ZipEntry

use java.net.URL
use java.net.Proxy
use java.net.Proxy.Type
use java.net.URLConnection
use java.net.InetSocketAddress
use java.net.HttpURLConnection

use java.lang.Boolean

use java.io.File
use java.io.FileWriter
use java.io.FileReader
use java.io.IOException
use java.io.InputStream
use java.io.OutputStream
use java.io.BufferedReader
use java.io.FileInputStream
use java.io.FileOutputStream
use java.io.InputStreamReader
use java.io.BufferedInputStream
use java.io.BufferedOutputStream
use java.io.ByteArrayInputStream
use java.io.ByteArrayOutputStream

use java.text.SimpleDateFormat

use org.apache.http.auth.AuthScope
use org.apache.http.auth.UsernamePasswordCredentials

use org.apache.http.client.config.RequestConfig
use org.apache.http.client.config.RequestConfig.Builder

use org.apache.http.client.methods.HttpGet

use org.apache.http.client.HttpClient
use org.apache.http.client.CredentialsProvider

use org.apache.http.impl.auth.BasicScheme

use org.apache.http.impl.client.HttpClientBuilder
use org.apache.http.impl.client.BasicCredentialsProvider

use org.apache.http.Header
use org.apache.http.HttpHost
use org.apache.http.HttpEntity
use org.apache.http.HttpRequest
use org.apache.http.HttpResponse

use com.google.gson.JsonArray
use com.google.gson.JsonParser
use com.google.gson.JsonObject
use com.google.gson.JsonElement
use com.google.gson.JsonFactory
use com.google.gson.stream.JsonReader

rem /**
rem  * This program is the starting program for the PluginManager BBj Plugin,
rem  * the program does install the PluginManager if it is not installed and it updates the 
rem  * PluginManager once updates are available.
rem  */
class public PluginManagerLauncher

    field private File bbjHome!
    field private File pluginsHome!
    field private ProxyConfigurationWindow proxyConfigurationWindow!

    field public static BBjNumber ProgramVersion = 1.10

    method public PluginManagerLauncher()
        #init()
    methodend

    method private void init()
        bbjHomePath! = System.getProperty("basis.BBjHome")
        #bbjHome! = new File(bbjHomePath!)
        if(!#bbjHome!.exists()) then
           throw "Could not find BBj Home", 255
        endif

        #pluginsHome! = new File(#bbjHome!, "plugins")
        if(!#pluginsHome!.exists()) then
            throw "The plugin folder could not be found", 255
        endif

        if(!#prefixContainsPluginsDirectory()) then
            declare StringBuilder sb!
            sb! = new StringBuilder()
            sb!.append("The prefix of the current config.bbx file doesn't contain the bbj/plugins directory path." + $0A$)
            sb!.append("Some plugins may not work properly because of this missing prefix entry." + $0A$)
            sb!.append("Do you want to add it?")

            a = msgbox(sb!.toString(), 4)

            if(a = 6) then
                #addPluginsDirectoryToThePrefix()
            endif
        endif
    methodend

    rem /**
    rem  * Returns true if the current prefix contains the plugin
    rem  * home directory, false otherwise.
    rem  * 
    rem  * @return true if the plugin home directory is part of the prefix, false otherwise.
    rem  */
    method public Boolean prefixContainsPluginsDirectory()
        prefixPaths! = pfx
        pluginsHomePath! = #pluginsHome!.getAbsolutePath()

        declare BBjVector vect!
        vect! = new BBjVector()
        if prefixPaths!.contains("""") then
            rem counting the quotes to avoid parsing unbalanced prefixes
            for i = 0 to prefixPaths!.length() -1
                if String.valueOf(prefixPaths!.charAt(i)) = """" then
                    quoteCounter = quoteCounter + 1
                endif
            next i

            noQuotePrefix! = ""
            if mod(quoteCounter, 2) = 0 then
                while(prefixPaths!.contains(""""))
                    firstIndex = prefixPaths!.indexOf("""")
                    lastIndex = prefixPaths!.indexOf("""", firstIndex+1)

                    vect!.add(prefixPaths!.substring(firstIndex+1, lastIndex))
                    noQuotePrefix! = noQuotePrefix! + prefixPaths!.substring(0, firstIndex)
                    prefixPaths! = prefixPaths!.substring(lastIndex+1)

                    if(!prefixPaths!.isEmpty())
                        prefixPaths! = prefixPaths!.trim()
                    endif
                wend

                noQuotePrefix! = noQuotePrefix! + prefixPaths!
                vect!.addAll(Arrays.asList(noQuotePrefix!.split(" ")))
            else
                a = msgbox("Your prefix contains an uneven amount of quotes, please review your prefix and remove the unnecessary quotes.")
                unbalancedPrefix = 1
            endif
        else
            vect!.addAll(Arrays.asList(prefixPaths!.split(" ")))
        endif

        rem create file object handles and compare the directories
        if !unbalancedPrefix then
            declare Iterator it!
            it! = vect!.iterator()

            pluginsHome$=pluginsHomePath!.replace("\","/")
            if pos("Win"=info(0,0)) or pos("Mac"=info(0,0)) then 
                ingoreCase = 1
                pluginsHome$=cvs(pluginsHome$,8) 
            endif

            while(it!.hasNext())
                directory$ = ""
                
                directory  = unt
                open (directory,err=*continue) cast(String, it!.next())
                directory$ = fid(directory,err=*continue)(9)
                close (directory)

                if ingoreCase then
                    directory$ = cvs(directory$,8) 
                endif

                if directory$ = pluginsHome$ then
                    methodret Boolean.TRUE
                endif
            wend

            methodret Boolean.FALSE
        endif

        rem check using a regular expression if the path is already defined in the prefix
        pluginsHomeRegex! = pluginsHomePath!.replaceAll("\\|\/", "(\\\\|\\\/)")
        pluginsHomeRegex! = pluginsHomeRegex!.replace(" ", "\s")

        rem ? ".*(?<=^|\""|\s)" + pluginsHomeRegex! + "(?=(\\|\/)?(\""|\s|$)).*"
        methodret prefixPaths!.matches(".*(?<=^|\""|\s)" + pluginsHomeRegex! + "(?=(\\|\/)?(\""|\s|$)).*")
    methodend

    method public void addPluginsDirectoryToThePrefix()
        declare File configFile!
        configFile! = new File(BBjAPI().getConfig().getConfigFileName())

        declare FileReader fileReader!
        fileReader! = new FileReader(configFile!)

        declare BufferedReader reader!
        reader! = new BufferedReader(fileReader!)

        declare StringBuilder sb!
        sb! = new StringBuilder()

        line! = reader!.readLine()
        while(line! <> null())
            if(len(line!) > 8 AND cvs(line!.substring(0,7),4) = "PREFIX ") then
                sb!.append(line!.substring(0,7) + """" + #pluginsHome!.getAbsolutePath() + File.separator + """ " + line!.substring(7))
            else
                sb!.append(line!)
            endif
            sb!.append($0A$)

            line! = reader!.readLine()
        wend

        fileReader!.close()
        reader!.close()

        ch = unt
        open(ch, mode="o_trunc") BBjAPI().getConfig().getConfigFileName()
        write(ch)sb!.toString()
        close(ch)
    methodend

    method public File getPluginsHome()
        methodret #pluginsHome!
    methodend

    rem /**
    rem  * Returns true if the PluginManager plugin is already installed in the
    rem  * bbj/plugins/ folder, false otherwise.
    rem  * 
    rem  * @return true if the PluginManager plugin is already installed, false otherwise.
    rem  */
    method public Boolean isPluginManagerInstalled()
        if(#pluginsHome! = null()) then
            rem TODO Set valid message & Error number
            throw "The bbj/plugins directory could not be found", 255
        endif

        declare BBjVector fileList!
        fileList! = new BBjVector(Arrays.asList(#pluginsHome!.listFiles()))

        declare Iterator it!
        it! = fileList!.iterator()

        declare File currentFile!
        while(it!.hasNext())
            currentFile! = cast(File, it!.next())

            if(currentFile!.getName().equals("PluginManager")) then
                methodret Boolean.TRUE
            endif
        wend

        methodret Boolean.FALSE
    methodend

    rem /**
    rem  * Installs the PluginManager into the bbj/plugins/ folder.
    rem  */
    method public void installPluginManager()
        pluginManagerDownloadURL$ = "https://github.com/BBj-Plugins/PluginManager/archive/master.zip"

        pluginInstalled! = #installPlugin(new URL(pluginManagerDownloadURL$), "PluginManager")

        if(!pluginInstalled!) then
            a = msgbox("The PluginManager could not be downloaded / installed. Please try again later or contact BASIS Support.")
            release
        endif

        declare File pluginManagerDirectory!
        pluginManagerDirectory! = new File(str(#pluginsHome!) + File.separator + "PluginManager")

        if(!pluginManagerDirectory!.exists()) then
            throw "The Plugin Manager could not be downloaded. Please try again later.", 255
        endif

        declare File installJsonFile!
        installJsonFile! = new File(pluginManagerDirectory!, "install.json")

        declare JsonObject jsonObject!
        jsonObject! = new JsonObject()

        jsonObject!.addProperty("last_change", #getTimestamp())

        declare FileWriter fileWriter!
        fileWriter! = new FileWriter(installJsonFile!)
        fileWriter!.write(jsonObject!.toString())
        fileWriter!.close()

        installJsonFile!.createNewFile()
    methodend
    
    method public ProxyConfigurationWindow promptForProxySettings(HttpHost proxy!)
        declare StringBuilder sb!
 
        if(proxy! = null()) then
            sb! = new StringBuilder()
            sb!.append("Failed to download the plugin from github. Either the site is currently not available, ")
            sb!.append("or your system's network settings might block the connection." + $0A$)
            sb!.append($0A$)
            sb!.append("If the connection can only be established over a Proxy Server, ")
            sb!.append("you'll need to specify the Proxy Server's settings. Would you like to configure the connection ?")
        else
            sb! = new StringBuilder()
            sb!.append("Failed to download the plugin from github using the following Proxy Server settings:" + $0A$)
            sb!.append("Proxy Hostname: " + proxy!.getHostName() + $0A$)
            sb!.append("Proxy Port: " + str(proxy!.getPort()) + $0A$ + $0A$)
            sb!.append("The exact error message is logged in the debug log." + $0A$)
            sb!.append("Would you like to adapt those settings ?")
        endif
        
        a = msgbox(sb!.toString(), 4)

        if a <> 6 then
            methodret null()
        endif

        if #proxyConfigurationWindow! = null() then
            #proxyConfigurationWindow! = new ProxyConfigurationWindow()
        endif
        
        #proxyConfigurationWindow!.open()
        
        methodret #proxyConfigurationWindow!
    methodend
    
    method public Boolean installPlugin(URL url!, String projectName!, UsernamePasswordCredentials credentials!)
        declare File zipFile!
        zipFile! = File.createTempFile(projectName!,".zip")

        declare DownloadHelper downloadHelper!
        downloadHelper! = new DownloadHelper()

        downloadHelper!.setDownloadURL(url!)
        downloadHelper!.setOutputFile(zipFile!)
        downloadHelper!.setSiteCredentials(credentials!)

        if !downloadHelper!.isSiteReachable(Boolean.FALSE) then
            downloadHelper!.setProxy(ProxyService.getProxyFromUserProperties())
            downloadHelper!.setProxyCredentials(ProxyService.getProxyCredentialsFromUserProperties())

            if downloadHelper!.isSiteReachable(Boolean.TRUE) then
                downloadHelper!.downloadFile(Boolean.TRUE)
            else
                declare HttpHost proxy!
                declare ProxyConfigurationWindow window!
                declare UsernamePasswordCredentials proxyCredentials!

                cancelProxySettings! = Boolean.FALSE
                while !downloadHelper!.isSiteReachable(Boolean.TRUE) AND !cancelProxySettings!
                    window! = #promptForProxySettings(proxy!)
                    
                    if window! = null() OR window!.dialogCanceled() then
                        cancelProxySettings! = Boolean.TRUE
                        break
                    endif
                    
                    port = window!.getPort()
                    hostname! = window!.getHostName()

                    proxy! = new HttpHost(hostname!, port)
                    downloadHelper!.setProxy(proxy!)

                    if window!.areCredentialsRequired() then
                        username! = window!.getUsername()
                        password! = window!.getPassword()

                        downloadHelper!.setProxyCredentials(new UsernamePasswordCredentials(username!, password!))
                    endif
                wend
                
                if downloadHelper!.isSiteReachable(Boolean.TRUE) then
                    downloadHelper!.downloadFile(Boolean.TRUE)
                endif
            endif
        else
            downloadHelper!.downloadFile(Boolean.FALSE)
        endif

        if !downloadHelper!.wasDownloadSuccessful() then
            zipFile!.delete(err=*next)
            
            ? 'cs'
            if downloadHelper!.getDownloadError() = null() then
                ? "Failed to establish the connection to the github repository"
            else
                ? 'cs', str(downloadHelper!.getDownloadError())
            endif
            
            methodret Boolean.FALSE
        endif

        ProxyService.saveProxy(downloadHelper!.getProxy())
        ProxyService.saveProxyCredentials(downloadHelper!.getProxyCredentials())

        rem unzips the zip file to the given directory
        #unzipArchive(zipFile!, new File(#pluginsHome!, projectName!))

        rem deletes the zip file
        zipFile!.delete()

        methodret Boolean.TRUE
    methodend

    method public Boolean installPlugin(URL url!, String projectName!)
        methodret #installPlugin(url!,projectName!,null())
    methodend

    method public String getTimestamp()
        declare SimpleDateFormat sdf!

        sdf! = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss", java.util.Locale.ENGLISH)
        sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        methodret sdf!.format(new java.util.Date()) + " GMT"
    methodend

    rem /**
    rem  * Unzips the given zip archive into the given output folder.
    rem  * 
    rem  * @param zipFile! The zip file handle.
    rem  * @param outputFolder! The output directory in which the content of the zip file will be extracted.
    rem  */ 
    method public void unzipArchive(File zipFile!, File outputFolder!)
        seterr unzipArchive_ErrorHandler

            rem Hack to create a byte[1024] in BBj
            declare ByteArrayOutputStream bos!
            bos! = new ByteArrayOutputStream(1024)
            for i=0 to 1024-1
                bos!.write(0)
            next i
            bytes! = bos!.toByteArray()

            declare ZipInputStream zipInputStream!
            zipInputStream! = new ZipInputStream(new FileInputStream(zipFile!))

            declare ZipEntry zipEntry!
            zipEntry! = zipInputStream!.getNextEntry()

            while(zipEntry! <> null())
                fileName! = zipEntry!.getName()

                rem removing the github folder name since we are using a custom folder
                fileName! = fileName!.substring(fileName!.indexOf("/")+1)

                newFile! = new File(outputFolder!.getAbsolutePath() + File.separator + fileName!)
                print "unzip: " + str(fileName!)

                new File(newFile!.getParent()).mkdirs()

                byteRead = zipInputStream!.read(bytes!)

                rem First checking to avoid creating files instead of folders
                if(byteRead > 0) then
                    fos! = new FileOutputStream(newFile!)

                    while(byteRead > 0)
                        fos!.write(bytes!, 0, byteRead)
                        byteRead = zipInputStream!.read(bytes!)
                    wend

                    fos!.close()
                endif

                zipEntry! = zipInputStream!.getNextEntry()
            wend

        unzipArchive_ErrorHandler:
            zipInputStream!.closeEntry(err=*next)
            zipInputStream!.close(err=*next)

            bos!.close(err=*next)
    methodend

    rem /**
    rem  * Updates the locally installed PluginManager BBj Plugin.
    rem  */
    method public void updatePluginManager()
        #installPluginManager()
    methodend

classend

rem TODO - DownloadHelper
class public DownloadHelper

    field public URL DownloadURL!
    field public File OutputFile!
    field public String DownloadError! = null()
    field public HttpResponse HttpResponse! = null()
    field public UsernamePasswordCredentials SiteCredentials!

    field public HttpHost Proxy!
    field public UsernamePasswordCredentials ProxyCredentials!

    method public DownloadHelper()
    methodend
    
    method public void download(Boolean useProxy!)
        #DownloadError! = null()
        #HttpResponse! = null()

        seterr downloadFileErrorHandler

            declare HttpClient httpClient!
            httpClient! = #getHttpClient(useProxy!)

            rem Hanlding the request
            declare HttpGet request!
            request! = new HttpGet(#DownloadURL!.toString())
            request!.setConfig(#getRequestConfig(5000))

            rem Adding the basic authentication header
            #addHeaderCredentials(request!)

            #HttpResponse! = httpClient!.execute(request!)

            if #HttpResponse!.getStatusLine().getStatusCode() <> 200 then
                #DownloadError! = "Error Downloading the file: " + str(response!)
            endif
            
            methodret 

        downloadFileErrorHandler:
            #DownloadError! = "Error " + str(err) + " " + errmes(-1)
    methodend
    
    method public InputStream getResponseInputStream()
        if !#wasDownloadSuccessful() then
            methodret
        endif
        
        declare HttpEntity entity!
        entity! = #HttpResponse!.getEntity()
        
        methodret entity!.getContent()
    methodend
    
    rem /**
    rem  * Downloads the file from the specified download url.
    rem  * The boolean parameter is used to specify whether the download
    rem  * should use the defined proxy or the system properties.
    rem  * 
    rem  * @param useProxy! The boolean value indicating whether to use the 
    rem  *                  defined proxy or the system properties
    rem  */
    method public void downloadFile(Boolean useProxy!)
        #download(useProxy!)
        
        if !#wasDownloadSuccessful() then
            methodret
        endif
        
        declare HttpEntity entity!
        entity! = #HttpResponse!.getEntity()

        if entity! <> null() then
            name! = #HttpResponse!.getFirstHeader("Content-Disposition").getValue()

            stream! = new FileOutputStream(#OutputFile!)
            entity!.writeTo(stream!)
            stream!.close()
        endif
    methodend

    method private void addHeaderCredentials(HttpGet request!)
        if #SiteCredentials! = null() then
            methodret
        endif

        declare Header header!
        declare BasicScheme basicScheme!

        basicScheme! =  new BasicScheme()
        header! = basicScheme!.authenticate(#SiteCredentials!, request!)

        request!.addHeader(header!)
    methodend

    rem /**
    rem  * Returns true if the file download was successful,
    rem  * false otherwise.
    rem  * 
    rem  * @return true when the download was successful, false otherwise. 
    rem  */
    method public Boolean wasDownloadSuccessful()
        if #DownloadError! = null() AND #HttpResponse! <> null() then
            methodret Boolean.TRUE
        endif

        methodret Boolean.FALSE
    methodend

    rem /**
    rem  * Returns true if a connection could be established with the 
    rem  * download url, false otherwise. The given boolean value defines
    rem  * whether to use the defined proxy or if the system properties
    rem  * should be used.
    rem  * 
    rem  * @param useProxy The boolean value indicating whether to use the defined proxy or not.
    rem  * @return true if the site can be reached, false otherwise.
    rem  */
    method public Boolean isSiteReachable(Boolean useProxy!)
        declare HttpClient httpClient!
        httpClient! = #getHttpClient(useProxy!)

        rem Hanlding the request
        declare HttpGet request!
        request! = new HttpGet(#DownloadURL!.toString())
        request!.setConfig(#getRequestConfig(1000))

        rem Adding the basic authentication header
        #addHeaderCredentials(request!)

        declare HttpResponse response!
        response! = httpClient!.execute(request!, err=*next)

        if response! = null() OR response!.getStatusLine().getStatusCode() <> 200 then
            methodret Boolean.FALSE
        endif

        methodret Boolean.TRUE
    methodend

    rem /**
    rem  * Returns a http client object using either the defined 
    rem  * proxy or the system properties depending on the value of the
    rem  * useProxy parameter.
    rem  * 
    rem  * @param useProxy! The boolean value indicating whether to use the
    rem  *                  defined proxy or the system properties
    rem  */
    method private HttpClient getHttpClient(Boolean useProxy!)
        declare HttpClientBuilder httpClientBuilder!
        httpClientBuilder! = HttpClientBuilder.create()

        if useProxy! then
            if #Proxy! <> null() then
                if #ProxyCredentials! <> null() then
                    declare AuthScope authScope!
                    declare BasicCredentialsProvider basicCredentialsProvider!

                    authScope! = new AuthScope(#Proxy!.getHostName(), #Proxy!.getPort())

                    basicCredentialsProvider! = new BasicCredentialsProvider()
                    basicCredentialsProvider!.setCredentials(authScope!, #ProxyCredentials!)

                    httpClientBuilder!.setDefaultCredentialsProvider(basicCredentialsProvider!)
                endif

                httpClientBuilder!.setProxy(#Proxy!)
            endif
        else
            httpClientBuilder!.useSystemProperties()
        endif

        methodret httpClientBuilder!.build()
    methodend

    rem /**
    rem  * Returns a request configuration object with the given timeout.
    rem  * 
    rem  * @param timeout 
    rem  */
    method private RequestConfig getRequestConfig(BBjNumber timeout)
        declare RequestConfig.Builder requestConfigBuilder!

        requestConfigBuilder! = RequestConfig.custom()
        requestConfigBuilder!.setSocketTimeout(timeout)
        requestConfigBuilder!.setConnectTimeout(timeout)
        requestConfigBuilder!.setConnectionRequestTimeout(timeout)

        methodret requestConfigBuilder!.build()
    methodend

classend

rem /**
rem  * The ProxyConfigurationWindow is used to display the user 
rem  * a window with required proxy information he needs to specify 
rem  * in order to download the PluginManager via proxy.
rem  */
class public ProxyConfigurationWindow

    field private BBjNumber port
    field private String    hostname!
    field private String    username!
    field private String    password!
    field private Boolean   credentialsRequired!

    field private BBjInputN   inpnPort!
    field private BBjInputE   inpeHostname!
    field private BBjInputE   inpeUsername!
    field private BBjEditBox  edbxPassword!
    field private BBjCheckBox chbNoCredentials!

    field private Boolean dialogCanceled!
    field private BBjTopLevelWindow window!

    rem /**
    rem  * The constructor of the ProxyConfigurationWindow
    rem  */
    method public ProxyConfigurationWindow()
        #dialogCanceled! = Boolean.FALSE
        #credentialsRequired! = Boolean.FALSE
    methodend

    rem /**
    rem  * Initializes the ProxyConfigurationWindow and its controls.
    rem  */
    method private void init()
        declare BBjSysGui sysGui!
        sysGui! = BBjAPI().openSysGui("X0")

        context = sysGui!.getAvailableContext()
        #window! = sysGui!.addWindow(context, 200, 200, 300, 230, "Proxy Configuration", $00010012$)
        #window!.setCallback(BBjAPI.ON_CLOSE, #this!, "closeWindow")

        id = #window!.getAvailableControlID()
        #window!.addStaticText(id, 10, 15, 75, 20, "Hostname: ", $8000$)

        id = #window!.getAvailableControlID()
        #inpeHostname! = #window!.addInputE(id, 95, 15-4, 150, 20, "")

        id = #window!.getAvailableControlID()
        #window!.addStaticText(id, 10, 45, 75, 20, "Port: ", $8000$)

        id = #window!.getAvailableControlID()
        #inpnPort! = #window!.addInputN(id, 95, 45-4, 150, 20, "")

        id = #window!.getAvailableControlID()
        #window!.addStaticText(id, 10, 95, 75, 20, "Username: ", $8000$)

        id = #window!.getAvailableControlID()
        #inpeUsername! = #window!.addInputE(id, 95, 95-4, 150, 20, "")

        id = #window!.getAvailableControlID()
        #window!.addStaticText(id, 10, 125, 75, 20, "Password: ", $8000$)

        id = #window!.getAvailableControlID()
        #edbxPassword! = #window!.addEditBox(id, 95, 125-4, 150, 20, "", $0400$)

        id = #window!.getAvailableControlID()
        #chbNoCredentials! = #window!.addCheckBox(id, 10, 150, 200, 20, "No credentials required")
        #chbNoCredentials!.setSelected(Boolean.TRUE)
        #enableCredentialsInputControls(Boolean.FALSE)
        #chbNoCredentials!.setCallback(BBjAPI.ON_CHECK_ON, #this!, "noCredentialsChecked")
        #chbNoCredentials!.setCallback(BBjAPI.ON_CHECK_OFF, #this!, "noCredentialsUnchecked")

        declare BBjButton btnOK!
        id = #window!.getAvailableControlID()
        btnOK! = #window!.addButton(id, 80, 195, 100, 25, "OK")
        btnOK!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "performOK")

        declare BBjButton btnCancel!
        id = #window!.getAvailableControlID()
        btnCancel! = #window!.addButton(id, 190, 195, 100, 25, "Cancel")
        btnCancel!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "performCancel")
    methodend

    rem /**
    rem  * Enables the proxy credentials input controls if the given value is
    rem  * true, else the controls will be disabled.
    rem  * 
    rem  * @param enable! The boolean value used to enable the controls.
    rem  */
    method public void enableCredentialsInputControls(Boolean enable!)
        #inpeUsername!.setEnabled(enable!)
        #edbxPassword!.setEnabled(enable!)
    methodend

    rem /**
    rem  * The event handler for the credentials required checkbox's 
    rem  * check event.
    rem  * 
    rem  * @param event! The event that gets thrown when the user checks the checkbox
    rem  */
    method public void noCredentialsChecked(BBjCheckOnEvent event!)
        #enableCredentialsInputControls(Boolean.FALSE)
    methodend

    rem /**
    rem  * The event handler for the credentials required checkbox's 
    rem  * uncheck event.
    rem  * 
    rem  * @param event! The event that gets thrown when the user unchecks the checkbox
    rem  */
    method public void noCredentialsUnchecked(BBjCheckOffEvent event!)
        #enableCredentialsInputControls(Boolean.TRUE)
    methodend

    rem /**
    rem  * Returns TRUE if the dialog was closed by 
    rem  * clicking the cancel button or by closing it
    rem  * using the window's close box. Returns FALSE
    rem  * otherwise.
    rem  * 
    rem  * @return true if the diallog was cancelled, false otherwise.
    rem  */
    method public Boolean dialogCanceled()
        methodret #dialogCanceled!
    methodend

    method public void performOK(BBjButtonPushEvent event!)
        #port = num(#inpnPort!.getText())
        #hostname! = #inpeHostname!.getText()
        #username! = #inpeUsername!.getText()
        #password! = #edbxPassword!.getText()

        #credentialsRequired! = !#chbNoCredentials!.isSelected()

        #close(#window!)
    methodend

    rem /**
    rem  * Returns true if the proxy authentication requires
    rem  * credentials, false otherwise.
    rem  * 
    rem  * @return true if the proxy required authentication, false otherwise. 
    rem  */
    method public Boolean areCredentialsRequired()
        methodret #credentialsRequired!
    methodend

    rem /**
    rem  * The event handler method for the cancel button's 
    rem  * on button push event.
    rem  * 
    rem  * @param event! The event thrown when the user clicks the cancel button.
    rem  */
    method public void performCancel(BBjButtonPushEvent event!)
        #dialogCanceled! = Boolean.TRUE
        #close(#window!)
    methodend

    rem /**
    rem  * Returns the entered hostname.
    rem  * 
    rem  * @return the hostname
    rem  */
    method public String getHostName()
        methodret #hostname!
    methodend

    rem /**
    rem  * Returns the entered port.
    rem  * 
    rem  * @return the port.
    rem  */
    method public BBjNumber getPort()
        methodret #port
    methodend

    rem /**
    rem  * Returns the entered username.
    rem  * 
    rem  * @return the username
    rem  */
    method public String getUsername()
        methodret #username!
    methodend

    rem /**
    rem  * Returns the entered password.
    rem  * 
    rem  * @return the password
    rem  */
    method public String getPassword()
        methodret #password!
    methodend

    rem /**
    rem  * Opens the ProxyConfigurationWindow. 
    rem  */
    method public void open()
        if(#window! = null()) then
            #init()
            bbjapi().setCustomEventCallback("CloseProxyConfiguratioWindowEvent", "endOpen")
        endif

        #window!.setVisible(1)

        process_events

        endOpen:
    methodend

    rem /**
    rem  * Resets the window's saved values.
    rem  */
    method public void resetContent()
        #port = 0
        #hostname! = null()
        #username! = null()
        #password! = null()

        #inpnPort!.setText("")
        #inpeHostname!.setText("")
        #inpeUsername!.setText("")
        #edbxPassword!.setText("")

        #chbNoCredentials!.setSelected(Boolean.TRUE)
        #enableCredentialsInputControls(Boolean.FALSE)
    methodend

    rem /**
    rem  * Closes the given window.
    rem  * 
    rem  * @param window! The window to close.
    rem  */
    method private void close(BBjTopLevelWindow window!)
        window!.setVisible(0)
        bbjapi().postCustomEvent("CloseProxyConfiguratioWindowEvent", "")
    methodend

    rem /**
    rem  * The event handler method for the main window's on close event.
    rem  * 
    rem  * @param event! The event which gets thrown when the user clicks 
    rem  *               on the window's close box
    rem  */
    method public void closeWindow(BBjCloseEvent event!)
        #dialogCanceled! = Boolean.TRUE
        #close(cast(BBjTopLevelWindow, event!.getControl()))
    methodend

classend

class public ProxyService

    field private static String PROXY_PORT_PROPERTY!     = "PluginManager_ProxyPort"
    field private static String PROXY_USERNAME_PROPERTY! = "PluginManager_ProxyUsername"
    field private static String PROXY_PASSWORD_PROPERTY! = "PluginManager_ProxyPassword"
    field private static String PROXY_HOSTNAME_PROPERTY! = "PluginManager_ProxyHostname"

    rem /**
    rem  * Saving the given proxy credentials into the user properties
    rem  */
    method public static void saveProxyCredentials(UsernamePasswordCredentials proxyCredentials!)
        proxyUsername! = proxyCredentials!.getUserName(err=*next)
        proxyPassowrd! = proxyCredentials!.getPassword(err=*next)

        declare BBjThinClient thinClient!
        thinClient! = bbjapi().getThinClient(err=*next)

        if thinClient! = null() then
            thinClient!.setUserProperty(#PROXY_USERNAME_PROPERTY!, proxyUsername!)
            thinClient!.setUserProperty(#PROXY_PASSWORD_PROPERTY!, proxyPassowrd!)    
        endif        
    methodend

    rem /**
    rem  * Saving the given proxy's information into the user properties
    rem  */
    method public static void saveProxy(HttpHost proxy!)
        proxyPort! = str(proxy!.getPort(err=*next))
        proxyHostname! = proxy!.getHostName(err=*next)

        declare BBjThinClient thinClient!
        thinClient! = bbjapi().getThinClient(err=*next)

        if thinClient! = null() then
            thinClient!.setUserProperty(#PROXY_PORT_PROPERTY!, proxyPort!)
            thinClient!.setUserProperty(#PROXY_HOSTNAME_PROPERTY!, proxyHostname!)
        endif
    methodend

    rem /**
    rem  * Returns the last saved proxy as HttpHost object, or
    rem  * null if there is no last proxy.
    rem  * 
    rem  * @return the last saved proxy or null.
    rem  */
    method public static HttpHost getProxyFromUserProperties()
        declare HttpHost proxy!
        declare BBjThinClient thinClient!

        thinClient! = bbjapi().getThinClient(err=*next)
        if thinClient! = null() then
            methodret null()
        endif

        proxyPort! = thinClient!.getUserProperty(#PROXY_PORT_PROPERTY!, err=*next)
        proxyHostname! = thinClient!.getUserProperty(#PROXY_HOSTNAME_PROPERTY!, err=*next)

        if proxyPort! = null() OR proxyHostname! = null() then
            methodret proxy!
        endif

        methodret new HttpHost(proxyHostname!, num(proxyPort!))
    methodend

    rem /**
    rem  * Returns the saved credentials for the last saved proxy as 
    rem  * UsernamePasswordCredentials object or null if there are no saved credentials.
    rem  * 
    rem  * @return the credentials saved for the last proxy or null.
    rem  */
    method public static UsernamePasswordCredentials getProxyCredentialsFromUserProperties()
        declare BBjThinClient thinClient!
        declare UsernamePasswordCredentials proxyCredentials!

        thinClient! = bbjapi().getThinClient(err=*next)
        if thinClient! = null() then
            methodret null()
        endif

        proxyUsername! = thinClient!.getUserProperty(#PROXY_USERNAME_PROPERTY!, err=*next)
        proxyPassword! = thinClient!.getUserProperty(#PROXY_PASSWORD_PROPERTY!, err=*next)

        if proxyUsername! = null() OR proxyPassword! = null() then
            methodret proxyCredentials!
        endif

        methodret new UsernamePasswordCredentials(proxyUsername!, proxyPassword!)
    methodend

classend

print 'cs'

declare PluginManagerLauncher pm!
pm! = new PluginManagerLauncher()

if(!pm!.isPluginManagerInstalled()) then
    print "Installing the PluginManager plugin"
    pm!.installPluginManager()
else
    rem if(pm!.isPluginManagerUpdateAvailable()) then
        print "Updating the PluginManager plugin"
        pm!.updatePluginManager()
    rem endif
endif

print 'hide'

command! = "bbj """ +  pm!.getPluginsHome().getAbsolutePath() + "/PluginManager/PluginManagerUI.bbj"""
a = scall(command!)
bye
