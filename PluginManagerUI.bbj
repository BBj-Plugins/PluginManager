use ::PluginManager/PluginManager.bbj::PluginManager

use ::PluginManager/src/Tag.bbj::Tag
use ::PluginManager/src/BBjPlugin.bbj::BBjPlugin
use ::PluginManager/src/RemoteBBjPlugin.bbj::RemoteBBjPlugin
use ::PluginManager/src/InstalledBBjPlugin.bbj::InstalledBBjPlugin

use ::PluginManager/src/gui/RemotePluginTab.bbj::RemotePluginTab
use ::PluginManager/src/gui/InstalledPluginTab.bbj::InstalledPluginTab
use ::PluginManager/src/gui/GithubCredentialWindow.bbj::GithubCredentialWindow
use ::PluginManager/src/gui/ConfigurePluginProjectURLsWindow.bbj::ConfigurePluginProjectURLsWindow

use java.util.Iterator
use java.util.ArrayList
use java.util.HashMap

use java.text.SimpleDateFormat

class public PluginManagerUI

    field public static String RUN_DEMO_PROGRAM!          = "RUN_DEMO_PROGRAM"
    field public static String ADD_CUSTOM_PLUGIN!         = "ADD_CUSTOM_PLUGIN"
    field public static String INSTALL_PLUGIN_END!        = "INSTALL_PLUGIN_END"
    field public static String REMOVE_CUSTOM_PLUGIN!      = "REMOVE_CUSTOM_PLUGIN"
    field public static String INSTALL_PLUGIN_REQUEST!    = "INSTALL_PLUGIN_REQUEST"
    field public static String UPDATE_PLUGIN_REQUEST!     = "UPDATE_PLUGIN_REQUEST"
    field public static String UNINSTALL_PLUGIN_REQUEST!  = "UNINSTALL_PLUGIN_REQUEST"
    field public static String RUN_CONFIGURATION_PROGRAM! = "RUN_CONFIGURATION_PROGRAM"

    field private PluginManager pluginManager!

    field private BBjSysGui sysGui!
    field private BBjTabCtrl tabCtrl!
    field private BBjTopLevelWindow window!
    field private BBjMenuBar mainWindowMenuBar!

    field private RemotePluginTab remoteTab!
    field private InstalledPluginTab installedTab!

    field private GithubCredentialWindow credentialWindow!

    field private ConfigurePluginProjectURLsWindow configurePluginProjectURLsWindow!

    method public PluginManagerUI()
        #pluginManager! = new PluginManager()
        #configurePluginProjectURLsWindow! = new ConfigurePluginProjectURLsWindow(#pluginManager!, #this!)
        #credentialWindow! = new GithubCredentialWindow()
        #init()
    methodend

    method private void init()
        #sysGui! = BBjAPI().openSysGui("X0")
        #sysGui!.setRepaintEnabled(0)

        window_width = 1000
        window_height = 650

        declare java.awt.Rectangle screenBounds!
        screenBounds! = #sysGui!.getSystemMetrics().getScreenBounds()

        screen_width = screenBounds!.getWidth()
        screen_height = screenBounds!.getHeight()
        #window! = #sysGui!.addWindow(100, (screen_width/2 - window_width/2), (screen_height/2 - window_height/2), window_width, window_height, "Plugin Manager", $00000082$)
        #window!.setCallback(BBjAPI.ON_CLOSE, #this!, "closeWindow")

        window_next_id = #window!.getAvailableControlID()
        #mainWindowMenuBar! = cast(BBjMenuBar, #window!.addMenuBar())

        window_next_id = #window!.getAvailableControlID()
        mainWindowMenuConfigure!  = cast(BBjMenu, #mainWindowMenuBar!.addMenu(window_next_id, "Configure"))

REM         window_next_id = #window!.getAvailableControlID()
REM         menuItemImportPlugins! = cast(BBjMenuItem, mainWindowMenuConfigure!.addMenuItem(window_next_id, "Import Plugins"))
REM         menuItemImportPlugins!.setEnabled(0)
REM         
REM         window_next_id = #window!.getAvailableControlID()
REM         menuItemExportPlugins! = cast(BBjMenuItem, mainWindowMenuConfigure!.addMenuItem(window_next_id, "Export Installed Plugins"))
REM         menuItemExportPlugins!.setEnabled(0)

REM         mainWindowMenuConfigure!.insertSeparator(2)

        window_next_id = #window!.getAvailableControlID()
        menuItemCustomizePluginProjectURLs! = cast(BBjMenuItem, mainWindowMenuConfigure!.addMenuItem(window_next_id, "Customize Plugin Project URLs"))

        menuItemCustomizePluginProjectURLs!.setCallback(BBjMenuItem.ON_MENU_ITEM_SELECT, #this!, "customizePluginProjectURLsMenuItemSelected")

        row_x = 10
        row_y = 50

        tab_width = window_width-20
        tab_height = window_height-row_y-10
        window_next_id = #window!.getAvailableControlID()
        #tabCtrl! = #window!.addTabCtrl(window_next_id, row_x, row_y, tab_width, tab_height)

        #installedTab! = new InstalledPluginTab(#window!, #tabCtrl!.getWidth(), #tabCtrl!.getHeight(), #sysGui!)
        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #tabCtrl!.addTab("Installed Plugins", #installedTab!.getChildWindow())
        bbjapi().setCustomEventCallback(#UPDATE_PLUGIN_REQUEST!, #this!, "updatePluginRequest")
        bbjapi().setCustomEventCallback(#UNINSTALL_PLUGIN_REQUEST!, #this!, "uninstallPluginRequest")

        #remoteTab! = new RemotePluginTab(#window!, #tabCtrl!.getWidth(), #tabCtrl!.getHeight(), #sysGui!)
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
        #tabCtrl!.addTab("Available Plugins", #remoteTab!.getChildWindow())
        
        declare BBjAPI bbjapi!
        bbjapi! = BBjAPI()
        
        bbjapi!.setCustomEventCallback(#INSTALL_PLUGIN_REQUEST!, #this!, "installPluginRequest")
        bbjapi!.setCustomEventCallback(#RUN_DEMO_PROGRAM!, #this!, "runDemoProgram")
        bbjapi!.setCustomEventCallback(#ADD_CUSTOM_PLUGIN!, #this!, "addCustomPlugin")
        bbjapi!.setCustomEventCallback(#REMOVE_CUSTOM_PLUGIN!, #this!, "removeCustomRemotePlugin")
        bbjapi!.setCustomEventCallback(#RUN_CONFIGURATION_PROGRAM!, #this!, "runConfigurationProgram")

        #sysGui!.setRepaintEnabled(1)
    methodend
    
    method public void runConfigurationProgram(BBjCustomEvent event!)
        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = cast(InstalledBBjPlugin, event!.getObject())
        
        rem TODO - If the plugin can have multiple configuration programs pass the selected one
        
        #pluginManager!.runConfigurationProgram(installedPlugin!, "configure.bbj")
    methodend

    method public void removeCustomRemotePlugin(BBjCustomEvent event!)
        declare RemoteBBjPlugin remotePlugin!
        remotePlugin! = cast(RemoteBBjPlugin, event!.getObject())

        #pluginManager!.removeCustomPluginRepository(remotePlugin!)

        #configurePluginProjectURLsWindow!.update(#pluginManager!.getCustomRemoteBBjPluginList())
        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    rem /**
    rem  * Gets called when a new custom plugin should be added to the list of plugins
    rem  */
    method public void addCustomPlugin(BBjCustomEvent event!)
        url! = str(event!.getObject())

        rem first check if the Github credentials are set
        if(!#pluginManager!.areGithubCredentialsSaved()) then

            useCredentials! = Boolean.FALSE
            rem if not, first check if the repo is public, if not prompt for the user credentials
            if(!#pluginManager!.isPluginProjectAccessible(url!, Boolean.FALSE)) then
                sb! = new StringBuilder("The provided project repository URL cannot be accessed(404).")
                sb!.append("This indicates either that the URL is wrong or the repository is private.")
                sb!.append($0A$)
                sb!.append("If the repository is private, you'll need to provide valid Github credentials to access it.")
                sb!.append("Do you want to add Github credentials ?")

                answer = msgbox(sb!.toString(), 4)

                if(answer <> 6) then
                    methodret
                endif

                invalidCredentials! = Boolean.TRUE
                while(invalidCredentials!)
                    #credentialWindow!.open(#sysGui!)

                    if(#credentialWindow!.dialogCanceled()) then
                        methodret
                    endif

                    #pluginManager!.setGihubCredentials(#credentialWindow!.getUsername(), #credentialWindow!.getPassword(), #credentialWindow!.saveCredentials())
                    if(#pluginManager!.areGithubCredentialsValid()) then
                        invalidCredentials! = Boolean.FALSE
                        break
                    endif

                    a = msgbox("The entered Github Login Credentials are not valid.")
                wend

                if(!#pluginManager!.isPluginProjectAccessible(url!, Boolean.TRUE)) then
                    answer = msgbox("The BBj Plugin repository does not exist or is not accessible. Please verify that the provided URL is correct and the reporsitory is available and try again.")
                    #inpeProjectURL!.focus()
                    methodret
                endif

                useCredentials! = Boolean.TRUE
            endif
        else
            useCredentials! = Boolean.TRUE

            if(!#pluginManager!.isPluginProjectAccessible(url!, Boolean.TRUE)) then
                answer = msgbox("The BBj Plugin repository does not exist or is not accessible. Please verify that the provided URL is correct and the reporsitory is available and try again.")
                #inpeProjectURL!.focus()
                methodret
            endif
        endif

        rem TODO check if the plugin isn't already added to the list
        #pluginManager!.addCustomBBjPluginRepository(url!, useCredentials!)

        #configurePluginProjectURLsWindow!.update(#pluginManager!.getCustomRemoteBBjPluginList())
        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    method public void runDemoProgram(BBjCustomEvent event!)
        declare HashMap map!
        map! = cast(HashMap, event!.getObject())

        declare Iterator it!
        it! = map!.entrySet().iterator()

        declare InstalledBBjPlugin installedPlugin!

        while(it!.hasNext())
            entry! = it!.next()

            installedPlugin! = cast(InstalledBBjPlugin, entry!.getKey())
            demoProgramName! = entry!.getValue()

            break
        wend

        #pluginManager!.runDemo(installedPlugin!, demoProgramName!)
    methodend

    method public void updatePluginRequest(BBjCustomEvent event!)
        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = cast(InstalledBBjPlugin, event!.getObject())

        #pluginManager!.updatePlugin(installedPlugin!)
        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    rem /**
    rem  * Uninstalls the plugin described in the given event! payload, and updates the tabs entries.
    rem  * 
    rem  * @param event! The event with the plugin to uninstall.
    rem  */
    method public void uninstallPluginRequest(BBjCustomEvent event!)
        declare InstalledBBjPlugin installedPlugin!
        installedPlugin! = cast(InstalledBBjPlugin, event!.getObject())

        if(#pluginManager!.isDependency(installedPlugin!)) then
            declare Iterator it!
            declare ArrayList list!
            declare StringBuilder sb!
            declare InstalledBBjPlugin plugin!

            sb! = new StringBuilder("The selected plugin is a dependency of the following plugins: " + $0A$ + $0A$)
            list! = #pluginManager!.getDependentPlugins(installedPlugin!)
            it! = list!.iterator()

            while(it!.hasNext())
                plugin! = cast(InstalledBBjPlugin, it!.next())
                sb!.append(plugin!.getName() + $0A$)
            wend
            sb!.append($0A$ + "Uninstalling it may break the plugins listed above. Do you want to uninstall it anyway ?")

            a = msgbox(sb!.toString(), 4)
            if(a <> 6) then
                methodret
            endif
        endif

        #pluginManager!.uninstallPlugin(installedPlugin!)
        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    method public void installPluginRequest(BBjCustomEvent event!)
        declare HashMap map!
        map! = cast(HashMap, event!.getObject())

        declare RemoteBBjPlugin remotePlugin!
        declare Tag tag!

        declare Iterator it!
        it! = map!.entrySet().iterator()

        while(it!.hasNext())
            entry! = it!.next()

            remotePlugin! = cast(RemoteBBjPlugin, entry!.getKey())
            tag! = cast(Tag, entry!.getValue())

            #installPlugin(remotePlugin!, tag!)
        wend

        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    method public void installPlugin(RemoteBBjPlugin remotePlugin!, Tag tag!)
        if(remotePlugin! = null() OR tag! = null()) then
            print "Error: null value"
            methodret
        endif

        if(#pluginManager!.hasDependencies(tag!)) then
            if(#pluginManager!.hasBBjDependency(tag!)) then
                if(!#pluginManager!.isBBjVersionValid(tag!)) then
                    a = msgbox("The installed BBj Version doesn't match the plugin's requirement."+ $0A$ +                   "The installed version is "+ str(REV) + $0A$ +                   "The plugin requires REV " + tag!.getBBjDependency() + " to run properly." + $0A$ +                   "Do want to install the plugin anyway ?", 4)

                    if(a <> 6) then
                        methodret
                    endif
                endif
            endif

            if(#pluginManager!.hasDependenciesToBBjPlugins(tag!)) then
                if(!#pluginManager!.areDependenciesInstalled(tag!)) then
                    rem TODO check if a dependency is installed but requires an update 

                    declare StringBuilder sb!
                    sb! = new StringBuilder("The selected plugin requires the following plugins to be installed in order to run properly: " + $0A$ + $0A$)

                    declare HashMap dependencyMap!
                    dependencyMap! = tag!.getPluginDependencyMap()

                    declare Iterator it!
                    it! = dependencyMap!.entrySet().iterator()

                    while(it!.hasNext())
                        entry! = it!.next()

                        sb!.append("Plugin: " + cast(RemoteBBjPlugin, entry!.getKey()).getName() + ",Tag: " + cast(Tag, entry!.getValue()).getName() + $0A$)
                    wend

                    sb!.append($0A$ + "Do you want to install these plugins as well?")
                    a = msgbox(sb!.toString(),4)

                    if(a <> 6 AND a <> 7) then
                        methodret
                    endif

                    if(a = 6) then
                        declare Tag dependencyTag!
                        declare RemoteBBjPlugin remoteDependencyPlugin!

                        it! = dependencyMap!.entrySet().iterator()
                        while(it!.hasNext())
                            entry! = it!.next()

                            dependencyTag! = cast(Tag, entry!.getValue())
                            remoteDependencyPlugin! = cast(RemoteBBjPlugin, entry!.getKey())

                            #installPlugin(remoteDependencyPlugin!, cast(Tag, entry!.getValue()))
                        wend
                     endif
                endif
            endif
        endif

        #pluginManager!.installPlugin(remotePlugin!, tag!)

        rem Throwing the event so that the UI can hide the progressbar
        bbjapi().postCustomEvent(#INSTALL_PLUGIN_END!, "")

        #installedTab!.updateTabEntries(#pluginManager!.getInstalledPluginList())
        #remoteTab!.updateTabEntries(#pluginManager!.getRemotePluginList(Boolean.TRUE))
    methodend

    method public void customizePluginProjectURLsMenuItemSelected(BBjMenuItemSelectEvent event!)
        #configurePluginProjectURLsWindow!.open(#sysGui!, #pluginManager!.getCustomRemoteBBjPluginList())
    methodend

    method public static String getDisplayDate(java.util.Date date!)
        declare SimpleDateFormat sdf!

        sdf! = new SimpleDateFormat("dd MMM yyyy HH:mm", java.util.Locale.ENGLISH)
        rem sdf!.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))

        methodret sdf!.format(date!)
    methodend

    method public void closeWindow(BBjCloseEvent event!)
        #window!.destroy()
        bye
    methodend

classend
print 'cs'

path! = BBjAPI().getFileSystem().resolvePath("PluginManagerLauncher.bbj", err=*next)

rem Adding the bbj/plugins folder to the session's prefix in case it hasn't been added yet
if(path! = null() OR path!.isEmpty()) then
    declare java.io.File currentDirectory!
    currentDirectory! = new java.io.File(dsk("") + dir(""))

    prefix """" + currentDirectory!.getParentFile().getAbsolutePath() + """ " + pfx
endif

declare PluginManagerUI pmui!
pmui! = new PluginManagerUI()

process_events